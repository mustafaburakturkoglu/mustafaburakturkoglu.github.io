{"id":706,"date":"2021-03-08T02:43:43","date_gmt":"2021-03-08T02:43:43","guid":{"rendered":"http:\/\/wp-io.dolby.net\/?p=706"},"modified":"2022-01-27T12:07:06","modified_gmt":"2022-01-27T20:07:06","slug":"setup-a-live-stream-with-dolby-io-and-mux","status":"publish","type":"post","link":"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/","title":{"rendered":"Setup a Live Stream with Dolby.io and Mux"},"content":{"rendered":"\n<p>Mux.com allows you to pilot your live streams either through their dashboard or using REST API calls. In this article I will show you how to first use the Mux dashboard to create your first live stream, then I will share some C# code to illustrate how to call the Mux REST APIs and the&nbsp;<a href=\"https:\/\/dolby.io\/\">Dolby.io<\/a>&nbsp;APIs to start a new live stream programmatically.<\/p>\n\n\n\n<h2>Using the Mux Dashboard<\/h2>\n\n\n\n<p>Log into your&nbsp;<a href=\"https:\/\/dashboard.mux.com\/\">Mux<\/a>&nbsp;account and go to the&nbsp;<strong>VIDEO<\/strong>&nbsp;and&nbsp;<strong>Live Streams<\/strong>&nbsp;section.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"434\" src=\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/live-streams-1024x434.png\" alt=\"\" class=\"wp-image-708\" srcset=\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/live-streams-1024x434.png 1024w, https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/live-streams-300x127.png 300w, https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/live-streams-768x326.png 768w, https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/live-streams.png 1238w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<p>On the Live Streams page, click on&nbsp;<strong>Create New Live Stream<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"797\" height=\"730\" src=\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/create-live-stream.png\" alt=\"\" class=\"wp-image-709\" srcset=\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/create-live-stream.png 797w, https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/create-live-stream-300x275.png 300w, https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/create-live-stream-768x703.png 768w\" sizes=\"(max-width: 797px) 100vw, 797px\" \/><\/figure>\n\n\n\n<p>In the POST body editor, you can configure your live stream; check the Mux&nbsp;<a href=\"https:\/\/docs.mux.com\/api-reference\/video#operation\/create-live-stream\">Reference documentation<\/a>&nbsp;for more information on configuration settings. You can leave the default to start. Click the&nbsp;<strong>Run Request<\/strong>&nbsp;button.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"783\" height=\"570\" src=\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/api-response.png\" alt=\"\" class=\"wp-image-710\" srcset=\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/api-response.png 783w, https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/api-response-300x218.png 300w, https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/api-response-768x559.png 768w\" sizes=\"(max-width: 783px) 100vw, 783px\" \/><\/figure>\n\n\n\n<p>Click on&nbsp;<strong>View Live Stream<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"501\" src=\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/live-stream-1024x501.png\" alt=\"\" class=\"wp-image-711\" srcset=\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/live-stream-1024x501.png 1024w, https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/live-stream-300x147.png 300w, https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/live-stream-768x376.png 768w, https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/live-stream.png 1177w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<p>Click on&nbsp;<strong>Show Stream Key<\/strong>&nbsp;and copy it. You will need it to generate the URL of where to send the RTMP stream to. Now, during your conference, you will need to make a&nbsp;<a href=\"https:\/\/dolby.io\/developers\/interactivity-apis\/reference\/rest-apis\/streaming#operation\/postRTMPStart\">REST API call<\/a>&nbsp;to the Dolby API with the URL of the RTMP endpoint, e.g.&nbsp;<code>rtmps:\/\/global-live.mux.com:443\/app\/11111111-aaaa-2222-bbbb-333333333333<\/code><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-clike\">curl https:\/\/session.voxeet.com\/v1\/api\/conferences\/mix\/{conference_id}\/live\/start \\\n    -H &quot;Content-Type: application\/json&quot; \\\n    -X POST \\\n    -d &#039;{ &quot;uri&quot;: &quot;rtmps:\/\/global-live.mux.com:443\/app\/{stream_key}&quot; }&#039; \\\n    -u {DOLBY_CONSUMER_KEY}:{DOLBY_CONSUMER_SECRET}<\/code><\/pre>\n\n\n\n<p>A few seconds after calling the API, you will be able to see the live stream starting on the Live Stream page.<\/p>\n\n\n\n<p>If you need to stop the live stream before the conference ends, call the following API:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-clike\">curl https:\/\/session.voxeet.com\/v1\/api\/conferences\/mix\/{conference_id}\/live\/stop \\\n    -H &quot;Content-Type: application\/json&quot; \\\n    -X POST \\\n    -u {DOLBY_CONSUMER_KEY}:{DOLBY_CONSUMER_SECRET}<\/code><\/pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Note:<\/strong>&nbsp;if the conference you want to live stream is protected using enhanced conference access control, you must use a conference access token to authenticate against the APIs and point to the \/v2\/ endpoints (<a href=\"https:\/\/dolby.io\/developers\/interactivity-apis\/reference\/rest-apis\/authentication\">Documentation<\/a>).<\/p><\/blockquote>\n\n\n\n<h2>Using REST APIs with C#<\/h2>\n\n\n\n<p>Log into your&nbsp;<a href=\"https:\/\/dashboard.mux.com\/\">Mux<\/a>&nbsp;account as an administrator and go to the&nbsp;<strong>VIDEO<\/strong>&nbsp;and&nbsp;<strong>Get Started<\/strong>&nbsp;section.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"140\" src=\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/create-an-api-access-token-1024x140.png\" alt=\"\" class=\"wp-image-712\" srcset=\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/create-an-api-access-token-1024x140.png 1024w, https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/create-an-api-access-token-300x41.png 300w, https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/create-an-api-access-token-768x105.png 768w, https:\/\/dolby.io\/wp-content\/uploads\/2021\/03\/create-an-api-access-token.png 1114w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<p>Click the button&nbsp;<strong>Create an API Access Token<\/strong>, then select the environment you wish to use for your live stream. In the permissions section, for Mux Video, select Full Access. Provide a name for this token and click&nbsp;<strong>Generate Token<\/strong>. Keep this access token secure, do not expose it in your source code. Follow the&nbsp;<a href=\"https:\/\/docs.mux.com\/guides\/video\/stream-video-files#1-get-an-api-access-token\">Mux documentation<\/a>.<\/p>\n\n\n\n<h2>Setup of the C# Code<\/h2>\n\n\n\n<p>Install the NuGet package&nbsp;<a href=\"https:\/\/www.nuget.org\/packages\/Newtonsoft.Json\">Newtonsoft<\/a>&nbsp;to parse the JSON payload.<\/p>\n\n\n\n<p>Use the following imports in your C# file:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-csharp\">using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;<\/code><\/pre>\n\n\n\n<p>Create an&nbsp;<code>HttpClient<\/code>&nbsp;in order to make the REST API calls to both&nbsp;<a href=\"https:\/\/mux.com\/\">Mux.com<\/a>&nbsp;and&nbsp;<a href=\"https:\/\/dolby.io\/\">Dolby.io<\/a>.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-csharp\">private static readonly HttpClient httpClient = new HttpClient();<\/code><\/pre>\n\n\n\n<h2 id=\"SetUpaLiveStreamwithDolby.ioandMux-CalltheMuxAPI\">Call the Mux API<\/h2>\n\n\n\n<p>This is the description of the payload message we will receive from the Mux API.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-csharp\">public sealed class DataResponse&lt;T&gt;\n{\n    [JsonProperty(&quot;data&quot;)]\n    public T Data { get; set; }\n}\n \npublic sealed class CreateLiveStreamResponse\n{\n    [JsonProperty(&quot;id&quot;)]\n    public string Id { get; set; }\n \n    [JsonProperty(&quot;stream_key&quot;)]\n    public string StreamKey { get; set; }\n}<\/code><\/pre>\n\n\n\n<p>This function will create the live stream on Mux and return the RTMP endpoint URL.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-csharp\">\/\/\/ &lt;summary&gt;\n\/\/\/ Creates a new live stream on mux.com.\n\/\/\/ &lt;\/summary&gt;\n\/\/\/ &lt;param name=&quot;accessTokenId&quot;&gt;Mux Access Token ID.&lt;\/param&gt;\n\/\/\/ &lt;param name=&quot;secretKey&quot;&gt;Mux Secret Key.&lt;\/param&gt;\n\/\/\/ &lt;returns&gt;URL of the RTMP endpoint.&lt;\/returns&gt;\npublic async Task&lt;string&gt; CreateLiveStreamAsync(string accessTokenId, string secretKey)\n{\n    \/\/ URL where to send the creation request\n    const string url = &quot;https:\/\/api.mux.com\/video\/v1\/live-streams&quot;;\n \n    \/\/ Payload to use to create and configure the live stream\n    \/\/ Reference: https:\/\/docs.mux.com\/reference#create-a-live-stream\n    const string json = &quot;{ \\&quot;playback_policy\\&quot;: [\\&quot;public\\&quot;], \\&quot;new_asset_settings\\&quot;: { \\&quot;playback_policy\\&quot;: [\\&quot;public\\&quot;] } }&quot;;\n \n    try\n    {\n        HttpRequestMessage httpRequest = new HttpRequestMessage(HttpMethod.Post, url);\n \n        \/\/ Generate the Authorization header for the HTTP request\n        byte[] bytes = Encoding.UTF8.GetBytes($&quot;{accessTokenId}:{secretKey}&quot;);\n        string base64 = Convert.ToBase64String(bytes);\n        httpRequest.Headers.TryAddWithoutValidation(&quot;Authorization&quot;, $&quot;Basic {base64}&quot;);\n \n        httpRequest.Content = new StringContent(json, Encoding.UTF8, &quot;application\/json&quot;);\n \n        using HttpResponseMessage response = await httpClient.SendAsync(httpRequest);\n        response.EnsureSuccessStatusCode();\n \n        string strResponse = await response.Content.ReadAsStringAsync();\n        DataResponse&lt;CreateLiveStreamResponse&gt; createLiveStreamResponse =\n            JsonConvert.DeserializeObject&lt;DataResponse&lt;CreateLiveStreamResponse&gt;&gt;(strResponse);\n \n        \/\/ Generate the RTMP endpoint URL\n        \/\/ Source: https:\/\/docs.mux.com\/docs\/live-streaming#2-start-broadcasting\n        return $&quot;rtmps:\/\/global-live.mux.com:443\/app\/{createLiveStreamResponse.Data.StreamKey}&quot;;\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($&quot;Exception: {ex.Message}&quot;);\n        throw;\n    }\n}<\/code><\/pre>\n\n\n\n<h2 id=\"SetUpaLiveStreamwithDolby.ioandMux-CalltheDolby.ioAPIsforenhancedconferenceaccesscontrol\">Call the&nbsp;<a href=\"https:\/\/dolby.io\/\">Dolby.io<\/a>&nbsp;APIs for Enhanced Conference Access Control<\/h2>\n\n\n\n<p>If the conference you want to live stream is protected using enhanced conference access control, you must follow this section. Otherwise, jump to the next section.<\/p>\n\n\n\n<p>First, create the function to request a conference access token that we will use for the REST API calls on&nbsp;<a href=\"https:\/\/dolby.io\/\">dolby.io<\/a>&nbsp;(<a href=\"https:\/\/dolby.io\/developers\/interactivity-apis\/reference\/rest-apis\/authentication\">Documentation<\/a>).<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-csharp\">\/\/\/ &lt;summary&gt;\n\/\/\/ Requests a conference access token.\n\/\/\/ &lt;\/summary&gt;\n\/\/\/ &lt;param name=&quot;consumerKey&quot;&gt;Dolby.io Consumer Key.&lt;\/param&gt;\n\/\/\/ &lt;param name=&quot;consumerSecret&quot;&gt;Dolby.io Consumer Secret.&lt;\/param&gt;\n\/\/\/ &lt;returns&gt;The access token to use to call the APIs.&lt;\/returns&gt;\nprivate async Task&lt;string&gt; GetAccessTokenAsync(string consumerKey, string consumerSecret)\n{\n    const string url = &quot;https:\/\/api.voxeet.com\/v1\/auth\/token&quot;;\n    const string json = &quot;{ \\&quot;grant_type\\&quot;: \\&quot;client_credentials\\&quot; }&quot;;\n \n    try\n    {\n        HttpRequestMessage httpRequest = new HttpRequestMessage(HttpMethod.Post, url);\n \n        \/\/ Generate the Authorization header for the HTTP request\n        byte[] bytes = Encoding.UTF8.GetBytes($&quot;{consumerKey}:{consumerSecret}&quot;);\n        string base64 = Convert.ToBase64String(bytes);\n        httpRequest.Headers.TryAddWithoutValidation(&quot;Authorization&quot;, $&quot;Basic {base64}&quot;);\n \n        httpRequest.Content = new StringContent(json, Encoding.UTF8, &quot;application\/json&quot;);\n \n        using HttpResponseMessage response = await httpClient.SendAsync(httpRequest);\n        response.EnsureSuccessStatusCode();\n \n        string strResponse = await response.Content.ReadAsStringAsync();\n        JwtToken jwtToken = JsonConvert.DeserializeObject&lt;JwtToken&gt;(strResponse);\n \n        return jwtToken.AccessToken;\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($&quot;Exception: {ex.Message}&quot;);\n        throw;\n    }\n}\n \npublic class JwtToken\n{\n    [JsonProperty(&quot;access_token&quot;)]\n    public string AccessToken { get; set; }\n \n    [JsonProperty(&quot;expires_in&quot;)]\n    public int ExpiresIn { get; set; }\n \n    [JsonProperty(&quot;token_type&quot;)]\n    public string TokenType { get; set; }\n}<\/code><\/pre>\n\n\n\n<p>Now here are the functions to start and stop the RTMP stream.<br><\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-csharp\">\/\/\/ &lt;summary&gt;\n\/\/\/ Starts an RTMP stream.\n\/\/\/ &lt;\/summary&gt;\n\/\/\/ &lt;param name=&quot;consumerKey&quot;&gt;Dolby.io Consumer Key.&lt;\/param&gt;\n\/\/\/ &lt;param name=&quot;consumerSecret&quot;&gt;Dolby.io Consumer Secret.&lt;\/param&gt;\n\/\/\/ &lt;param name=&quot;conferenceId&quot;&gt;Conference identifier.&lt;\/param&gt;\n\/\/\/ &lt;param name=&quot;rtmpUrl&quot;&gt;URL of the RTMP endpoint.&lt;\/param&gt;\npublic async Task StartRtmpStreamAsync(string consumerKey, string consumerSecret, string conferenceId, string rtmpUrl)\n{\n    string url = $&quot;https:\/\/api.voxeet.com\/v2\/conferences\/mix\/{conferenceId}\/rtmp\/start&quot;;\n    string json = $&quot;{{ \\&quot;uri\\&quot;: \\&quot;{rtmpUrl}\\&quot; }}&quot;;\n \n    try\n    {\n        HttpRequestMessage httpRequest = new HttpRequestMessage(HttpMethod.Post, url);\n \n        \/\/ Generate the Authorization header for the HTTP request\n        string accessToken = await GetAccessTokenAsync(consumerKey, consumerSecret);\n        httpRequest.Headers.TryAddWithoutValidation(&quot;Authorization&quot;, $&quot;Bearer {accessToken}&quot;);\n \n        httpRequest.Content = new StringContent(json, Encoding.UTF8, &quot;application\/json&quot;);\n \n        using HttpResponseMessage response = await httpClient.SendAsync(httpRequest);\n        response.EnsureSuccessStatusCode();\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($&quot;Exception: {ex.Message}&quot;);\n        throw;\n    }\n}\n \n\/\/\/ &lt;summary&gt;\n\/\/\/ Stops an RTMP live stream.\n\/\/\/ &lt;\/summary&gt;\n\/\/\/ &lt;param name=&quot;consumerKey&quot;&gt;Dolby.io Consumer Key.&lt;\/param&gt;\n\/\/\/ &lt;param name=&quot;consumerSecret&quot;&gt;Dolby.io Consumer Secret.&lt;\/param&gt;\n\/\/\/ &lt;param name=&quot;conferenceId&quot;&gt;Conference identifier.&lt;\/param&gt;\npublic async Task StopRtmpStreamAsync(string consumerKey, string consumerSecret, string conferenceId)\n{\n    string url = $&quot;https:\/\/api.voxeet.com\/v2\/api\/conferences\/mix\/{conferenceId}\/live\/stop&quot;;\n \n    try\n    {\n        HttpRequestMessage httpRequest = new HttpRequestMessage(HttpMethod.Post, url);\n \n        \/\/ Generate the Authorization header for the HTTP request\n        string accessToken = await GetAccessTokenAsync(consumerKey, consumerSecret);\n        httpRequest.Headers.TryAddWithoutValidation(&quot;Authorization&quot;, $&quot;Bearer {accessToken}&quot;);\n \n        using HttpResponseMessage response = await httpClient.SendAsync(httpRequest);\n        response.EnsureSuccessStatusCode();\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($&quot;Exception: {ex.Message}&quot;);\n        throw;\n    }\n}<\/code><\/pre>\n\n\n\n<h2>Call the&nbsp;<a href=\"https:\/\/dolby.io\/\">Dolby.io<\/a>&nbsp;APIs Regular Conferences<\/h2>\n\n\n\n<p>If the conference you want to live stream is not protected using enhanced conference access control, you must follow this section. The only difference in the code that follows is around the authentication. We will use Basic authentication for the API calls.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-csharp\">\/\/\/ &lt;summary&gt;\n\/\/\/ Starts an RTMP live stream.\n\/\/\/ &lt;\/summary&gt;\n\/\/\/ &lt;param name=&quot;consumerKey&quot;&gt;Dolby.io Consumer Key.&lt;\/param&gt;\n\/\/\/ &lt;param name=&quot;consumerSecret&quot;&gt;Dolby.io Consumer Secret.&lt;\/param&gt;\n\/\/\/ &lt;param name=&quot;conferenceId&quot;&gt;Conference identifier.&lt;\/param&gt;\n\/\/\/ &lt;param name=&quot;rtmpUrl&quot;&gt;URL of the RTMP endpoint.&lt;\/param&gt;\npublic async Task StartRtmpStreamAsync(string consumerKey, string consumerSecret, string conferenceId, string rtmpUrl)\n{\n    string url = $&quot;https:\/\/session.voxeet.com\/v1\/api\/conferences\/mix\/{conferenceId}\/live\/start&quot;;\n    string json = $&quot;{{ \\&quot;uri\\&quot;: \\&quot;{rtmpUrl}\\&quot; }}&quot;;\n \n    try\n    {\n        HttpRequestMessage httpRequest = new HttpRequestMessage(HttpMethod.Post, url);\n \n        \/\/ Generate the Authorization header for the HTTP request\n        byte[] bytes = Encoding.UTF8.GetBytes($&quot;{consumerKey}:{consumerSecret}&quot;);\n        string base64 = Convert.ToBase64String(bytes);\n        httpRequest.Headers.TryAddWithoutValidation(&quot;Authorization&quot;, $&quot;Basic {base64}&quot;);\n \n        httpRequest.Content = new StringContent(json, Encoding.UTF8, &quot;application\/json&quot;);\n \n        using HttpResponseMessage response = await httpClient.SendAsync(httpRequest);\n        response.EnsureSuccessStatusCode();\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($&quot;Exception: {ex.Message}&quot;);\n        throw;\n    }\n}\n \n\/\/\/ &lt;summary&gt;\n\/\/\/ Stops an RTMP live stream.\n\/\/\/ &lt;\/summary&gt;\n\/\/\/ &lt;param name=&quot;consumerKey&quot;&gt;Dolby.io Consumer Key.&lt;\/param&gt;\n\/\/\/ &lt;param name=&quot;consumerSecret&quot;&gt;Dolby.io Consumer Secret.&lt;\/param&gt;\n\/\/\/ &lt;param name=&quot;conferenceId&quot;&gt;Conference identifier.&lt;\/param&gt;\npublic async Task StopRtmpStreamAsync(string consumerKey, string consumerSecret, string conferenceId)\n{\n    string url = $&quot;https:\/\/session.voxeet.com\/v1\/api\/conferences\/mix\/{conferenceId}\/live\/stop&quot;;\n \n    try\n    {\n        HttpRequestMessage httpRequest = new HttpRequestMessage(HttpMethod.Post, url);\n \n        \/\/ Generate the Authorization header for the HTTP request\n        byte[] bytes = Encoding.UTF8.GetBytes($&quot;{consumerKey}:{consumerSecret}&quot;);\n        string base64 = Convert.ToBase64String(bytes);\n        httpRequest.Headers.TryAddWithoutValidation(&quot;Authorization&quot;, $&quot;Basic {base64}&quot;);\n \n        using HttpResponseMessage response = await httpClient.SendAsync(httpRequest);\n        response.EnsureSuccessStatusCode();\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($&quot;Exception: {ex.Message}&quot;);\n        throw;\n    }\n}<\/code><\/pre>\n\n\n\n<h2>Test Your Code<\/h2>\n\n\n\n<p>Now that the code is ready, create a conference in your environment and call the different functions to create a live stream on Mux then start and stop the broadcast. After a few seconds, you will see the conference being broadcasted on&nbsp;<a href=\"https:\/\/mux.com\/\">Mux.com<\/a>&nbsp;and a minute later it will stop.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-csharp\">public async Task StartAndStopAsync(string conferenceId)\n{\n    \/\/ Store these credentials somewhere safe\n    const string MUX_ACCESS_TOKEN_ID = &quot;&quot;;\n    const string MUX_SECRET_KEY = &quot;&quot;;\n    const string DOLBY_CONSUMER_KEY = &quot;&quot;;\n    const string DOLBY_CONSUMER_SECRET = &quot;&quot;;\n \n    \/\/ Create the Live Stream on Mux.com and get the RTMP URL\n    string rtmpsUrl = await CreateLiveStreamAsync(MUX_ACCESS_TOKEN_ID, MUX_SECRET_KEY);\n \n    \/\/ Start the RTMP streaming from Dolby.IO to Mux.com\n    await StartRtmpStreamAsync(DOLBY_CONSUMER_KEY, DOLBY_CONSUMER_SECRET, conferenceId, rtmpsUrl);\n \n    \/\/ Wait a minute before stopping the RTMP stream\n    System.Threading.Thread.Sleep(60 * 1000);\n \n    \/\/ Stop the RTMP stream\n    await StopRtmpStreamAsync(DOLBY_CONSUMER_KEY, DOLBY_CONSUMER_SECRET, conferenceId);\n}<\/code><\/pre>\n\n\n\n<h2>Conclusion<\/h2>\n\n\n\n<p>Look for more samples soon for integrating your video conferences with various streaming platforms over RTMP.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>To reach more users, you can live stream a video conference with Dolby.io over RTMP to Mux.com using C#.<\/p>\n","protected":false},"author":19,"featured_media":2023,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_genesis_hide_title":false,"_genesis_hide_breadcrumbs":false,"_genesis_hide_singular_image":false,"_genesis_hide_footer_widgets":false,"_genesis_custom_body_class":"","_genesis_custom_post_class":"","_genesis_layout":""},"categories":[11,9],"tags":[39,40],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.2 (Yoast SEO v18.5.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Setup a Live Stream with Dolby.io and Mux - Dolby.io<\/title>\n<meta name=\"description\" content=\"To reach more users, you can live stream a video conference with Dolby.io over RTMP to Mux.com using C#.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Setup a Live Stream with Dolby.io and Mux\" \/>\n<meta property=\"og:description\" content=\"To reach more users, you can live stream a video conference with Dolby.io over RTMP to Mux.com using C#.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/\" \/>\n<meta property=\"og:site_name\" content=\"Dolby.io\" \/>\n<meta property=\"article:published_time\" content=\"2021-03-08T02:43:43+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-27T20:07:06+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1088\" \/>\n\t<meta property=\"og:image:height\" content=\"450\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Fabien Lavocat\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"8 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/dolby.io\/#organization\",\"name\":\"Dolby.io\",\"url\":\"https:\/\/dolby.io\/\",\"sameAs\":[],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/dolby.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/DolbyIO-favicon.png\",\"contentUrl\":\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/DolbyIO-favicon.png\",\"width\":512,\"height\":512,\"caption\":\"Dolby.io\"},\"image\":{\"@id\":\"https:\/\/dolby.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/dolby.io\/#website\",\"url\":\"https:\/\/dolby.io\/\",\"name\":\"Dolby.io\",\"description\":\"Dolby.io\",\"publisher\":{\"@id\":\"https:\/\/dolby.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/dolby.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg\",\"contentUrl\":\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg\",\"width\":1088,\"height\":450},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#webpage\",\"url\":\"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/\",\"name\":\"Setup a Live Stream with Dolby.io and Mux - Dolby.io\",\"isPartOf\":{\"@id\":\"https:\/\/dolby.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#primaryimage\"},\"datePublished\":\"2021-03-08T02:43:43+00:00\",\"dateModified\":\"2022-01-27T20:07:06+00:00\",\"description\":\"To reach more users, you can live stream a video conference with Dolby.io over RTMP to Mux.com using C#.\",\"breadcrumb\":{\"@id\":\"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/dolby.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Setup a Live Stream with Dolby.io and Mux\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#webpage\"},\"author\":{\"@id\":\"https:\/\/dolby.io\/#\/schema\/person\/c2e43849f218a168b4093d136613c041\"},\"headline\":\"Setup a Live Stream with Dolby.io and Mux\",\"datePublished\":\"2021-03-08T02:43:43+00:00\",\"dateModified\":\"2022-01-27T20:07:06+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#webpage\"},\"wordCount\":654,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/dolby.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg\",\"keywords\":[\"c#\",\"rtmp\"],\"articleSection\":[\"Communications\",\"Developer\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/dolby.io\/#\/schema\/person\/c2e43849f218a168b4093d136613c041\",\"name\":\"Fabien Lavocat\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/dolby.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/0fc56a90b3eff450d8ead43738f18a2c?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/0fc56a90b3eff450d8ead43738f18a2c?s=96&d=mm&r=g\",\"caption\":\"Fabien Lavocat\"},\"url\":\"https:\/\/dolby.io\/blog\/author\/flavo\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Setup a Live Stream with Dolby.io and Mux - Dolby.io","description":"To reach more users, you can live stream a video conference with Dolby.io over RTMP to Mux.com using C#.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/","og_locale":"en_US","og_type":"article","og_title":"Setup a Live Stream with Dolby.io and Mux","og_description":"To reach more users, you can live stream a video conference with Dolby.io over RTMP to Mux.com using C#.","og_url":"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/","og_site_name":"Dolby.io","article_published_time":"2021-03-08T02:43:43+00:00","article_modified_time":"2022-01-27T20:07:06+00:00","og_image":[{"width":1088,"height":450,"url":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg","type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_misc":{"Written by":"Fabien Lavocat","Est. reading time":"8 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/dolby.io\/#organization","name":"Dolby.io","url":"https:\/\/dolby.io\/","sameAs":[],"logo":{"@type":"ImageObject","@id":"https:\/\/dolby.io\/#logo","inLanguage":"en-US","url":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/DolbyIO-favicon.png","contentUrl":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/DolbyIO-favicon.png","width":512,"height":512,"caption":"Dolby.io"},"image":{"@id":"https:\/\/dolby.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/dolby.io\/#website","url":"https:\/\/dolby.io\/","name":"Dolby.io","description":"Dolby.io","publisher":{"@id":"https:\/\/dolby.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/dolby.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#primaryimage","inLanguage":"en-US","url":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg","contentUrl":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg","width":1088,"height":450},{"@type":"WebPage","@id":"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#webpage","url":"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/","name":"Setup a Live Stream with Dolby.io and Mux - Dolby.io","isPartOf":{"@id":"https:\/\/dolby.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#primaryimage"},"datePublished":"2021-03-08T02:43:43+00:00","dateModified":"2022-01-27T20:07:06+00:00","description":"To reach more users, you can live stream a video conference with Dolby.io over RTMP to Mux.com using C#.","breadcrumb":{"@id":"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/dolby.io\/"},{"@type":"ListItem","position":2,"name":"Setup a Live Stream with Dolby.io and Mux"}]},{"@type":"Article","@id":"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#article","isPartOf":{"@id":"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#webpage"},"author":{"@id":"https:\/\/dolby.io\/#\/schema\/person\/c2e43849f218a168b4093d136613c041"},"headline":"Setup a Live Stream with Dolby.io and Mux","datePublished":"2021-03-08T02:43:43+00:00","dateModified":"2022-01-27T20:07:06+00:00","mainEntityOfPage":{"@id":"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#webpage"},"wordCount":654,"commentCount":0,"publisher":{"@id":"https:\/\/dolby.io\/#organization"},"image":{"@id":"https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#primaryimage"},"thumbnailUrl":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg","keywords":["c#","rtmp"],"articleSection":["Communications","Developer"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/dolby.io\/blog\/setup-a-live-stream-with-dolby-io-and-mux\/#respond"]}]},{"@type":"Person","@id":"https:\/\/dolby.io\/#\/schema\/person\/c2e43849f218a168b4093d136613c041","name":"Fabien Lavocat","image":{"@type":"ImageObject","@id":"https:\/\/dolby.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/0fc56a90b3eff450d8ead43738f18a2c?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/0fc56a90b3eff450d8ead43738f18a2c?s=96&d=mm&r=g","caption":"Fabien Lavocat"},"url":"https:\/\/dolby.io\/blog\/author\/flavo\/"}]}},"uagb_featured_image_src":{"full":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg",1088,450,false],"thumbnail":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference-150x150.jpg",150,150,true],"medium":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference-300x124.jpg",300,124,true],"medium_large":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference-768x318.jpg",768,318,true],"large":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference-1024x424.jpg",1024,424,true],"1536x1536":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg",1088,450,false],"2048x2048":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg",1088,450,false],"featured-page":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference-1088x400.jpg",1088,400,true],"gb-block-post-grid-landscape":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference-600x400.jpg",600,400,true],"gb-block-post-grid-square":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference-600x450.jpg",600,450,true]},"uagb_author_info":{"display_name":"Fabien Lavocat","author_link":"https:\/\/dolby.io\/blog\/author\/flavo\/"},"uagb_comment_info":0,"uagb_excerpt":"To reach more users, you can live stream a video conference with Dolby.io over RTMP to Mux.com using C#.","featured_image_src":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference-600x400.jpg","featured_image_src_square":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference-600x450.jpg","author_info":{"display_name":"Fabien Lavocat","author_link":"https:\/\/dolby.io\/blog\/author\/flavo\/"},"_links":{"self":[{"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/posts\/706"}],"collection":[{"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/users\/19"}],"replies":[{"embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/comments?post=706"}],"version-history":[{"count":0,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/posts\/706\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/media\/2023"}],"wp:attachment":[{"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/media?parent=706"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/categories?post=706"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/tags?post=706"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}