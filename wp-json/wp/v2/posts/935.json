{"id":935,"date":"2021-07-15T23:36:00","date_gmt":"2021-07-15T23:36:00","guid":{"rendered":"http:\/\/wp-io.dolby.net\/?p=935"},"modified":"2022-01-27T11:34:27","modified_gmt":"2022-01-27T19:34:27","slug":"how-to-use-dolby-io-video-conferencing-with-angular","status":"publish","type":"post","link":"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/","title":{"rendered":"How to Use Video Conferencing with Angular"},"content":{"rendered":"\n<p>Dolby.io enables video conferencing with the true power of voice by using Dolby Voice technologies.&nbsp;Using&nbsp;<a href=\"https:\/\/dolby.io\/\">Dolby.io<\/a>&nbsp;today will remove the unwanted noises and echo, add dynamic audio leveling, optimize bandwidth utilization, and help maintain good audio quality in challenging network conditions.<\/p>\n\n\n\n<p>Dolby.io has several how-tos,&nbsp;tutorials, and guides&nbsp;that help you build your own video&nbsp;conferencing using a&nbsp;<a href=\"https:\/\/github.com\/voxeet\/voxeet-sdk-web\" target=\"_blank\" rel=\"noreferrer noopener\">&#8220;Client SDK&#8221;<\/a>&nbsp;for plain JavaScript, a&nbsp;<a href=\"https:\/\/github.com\/voxeet\/voxeet-uxkit-react\" target=\"_blank\" rel=\"noreferrer noopener\">&#8220;Client UXKit&#8221;<\/a>&nbsp;for React, a&nbsp;<a href=\"https:\/\/docs.dolby.io\/communications-apis\/reference\/authentication-api\">&#8220;REST API&#8221;<\/a>&nbsp;for other languages.&nbsp;But what about Angular? <\/p>\n\n\n\n<p>Let&#8217;s cook a video conferencing application using Angular along with&nbsp;<a href=\"https:\/\/dolby.io\/\">Dolby.io<\/a>&nbsp;Interactivity APIs and MaterialUI so that it.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"843\" src=\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/dolby_io_2-1024x843.png\" alt=\"\" class=\"wp-image-955\" srcset=\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/dolby_io_2-1024x843.png 1024w, https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/dolby_io_2-300x247.png 300w, https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/dolby_io_2-768x632.png 768w, https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/dolby_io_2-1536x1265.png 1536w, https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/dolby_io_2.png 2038w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<h2 id=\"HowtoUseDolby.ioVideoConferencingWithAngular-BeginfromAngular...\">Begin from Angular&#8230;<\/h2>\n\n\n\n<p>First of all, let&#8217;s create a new Angular application. If you are new to Angular and willing to know more about it, you might visit the official page:&nbsp;<a href=\"https:\/\/angular.io\/start\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/angular.io\/start<\/a>.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">mkdir dolby.io\ncd dolby.io\nnpm install -g @angular\/cli\nng new conference<\/code><\/pre>\n\n\n\n<p>The&nbsp;<code>ng new<\/code>&nbsp;command prompts you for information about features to include in the app. I&#8217;d recommend answering &#8220;No&#8221; on the first question:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">? Do you want to enforce stricter type checking and stricter bundle budgets in the workspace?\n  This setting helps improve maintainability and catch bugs ahead of time.\n  For more information, see https:\/\/angular.io\/strict (y\/N)<\/code><\/pre>\n\n\n\n<p>I&#8217;d suggest answering &#8220;No&#8221; for the second question (we will add routing later):<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">? Would you like to add Angular routing? (y\/N)<\/code><\/pre>\n\n\n\n<p>Let&#8217;s choose&nbsp;<code>CSS<\/code> for the third question:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">? Which stylesheet format would you like to use? (Use arrow keys)\n\u276f CSS\n  SCSS   [ https:\/\/sass-lang.com\/documentation\/syntax#scss                ]\n  Sass   [ https:\/\/sass-lang.com\/documentation\/syntax#the-indented-syntax ]\n  Less   [ https:\/\/lesscss.org                                             ]\n  Stylus [ https:\/\/stylus-lang.com                                        ]<\/code><\/pre>\n\n\n\n<p>The&nbsp;<code>ng new<\/code>&nbsp;command may take 2-3 minutes to create a project and install necessary libraries. After the process ends, you will need to change the current directory to&nbsp;<code>conference<\/code>&nbsp;created by the command:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">cd conference<\/code><\/pre>\n\n\n\n<h2 id=\"HowtoUseDolby.ioVideoConferencingWithAngular-AddSomeColorsandStyles...\">Add Some Colors and Styles&#8230;<\/h2>\n\n\n\n<p>Let&#8217;s enhance the look &amp; feel of our conference by adding a library&nbsp;<code>MaterialUI<\/code>:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">ng add @angular\/material<\/code><\/pre>\n\n\n\n<p>The command above will guide you through a &#8220;MaterialUI&#8221;&nbsp;library installation and let you choose a color theme:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">\u2139 Using package manager: npm\n\u280b Searching for compatible package version...\n\u2714 Found compatible package version: @angular\/material@11.2.12.\n\u2714 Package information loaded.\n \nThe package @angular\/material@12.0.5 will be installed and executed.\nWould you like to proceed? Yes\n\u2714 Package successfully installed.\n? Choose a prebuilt theme name, or &quot;custom&quot; for a custom theme:\n  Indigo\/Pink        [ Preview: https:\/\/material.angular.io?theme=indigo-pink ]\n  Deep Purple\/Amber  [ Preview: https:\/\/material.angular.io?theme=deeppurple-amber ]\n  Pink\/Blue Grey     [ Preview: https:\/\/material.angular.io?theme=pink-bluegrey ]\n\u276f Purple\/Green       [ Preview: https:\/\/material.angular.io?theme=purple-green ]\n  Custom<\/code><\/pre>\n\n\n\n<p>You can choose any color theme, though I prefer&nbsp;<code>Purple-Green<\/code>. Let&#8217;s complete the process by answering questions as shown below:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">? Set up global Angular Material typography styles? No\n? Set up browser animations for Angular Material? Yes<\/code><\/pre>\n\n\n\n<p>Now you can apply material styles for the application background by modifying&nbsp;<code>src\/index.html<\/code>:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-markup\">&lt;body class=&quot;mat-app-background&quot;&gt;\n  &lt;app-root&gt;&lt;\/app-root&gt;\n&lt;\/body&gt;<\/code><\/pre>\n\n\n\n<p>You will need to remove the default content of your application&nbsp;in&nbsp;<code>src\/app\/app.component.html<\/code>&nbsp;and make it as the following:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-markup\">&lt;app-top-bar&gt;&lt;\/app-top-bar&gt;\n&lt;router-outlet&gt;&lt;\/router-outlet&gt;<\/code><\/pre>\n\n\n\n<h2 id=\"HowtoUseDolby.ioVideoConferencingWithAngular-AddComponents...\">Add Components&#8230;<\/h2>\n\n\n\n<p>Your application will include several forms, so you have to add routing and some components:<\/p>\n\n\n\n<ol><li>Create the component&nbsp;<code>conference<\/code>&nbsp;that will contain a logic of joining to video conference and conference controls (enable\/disable video, audio, button &#8220;leave&#8221;, etc):<br><code>ng generate component conference<\/code><\/li><li>Create the component&nbsp;<code>create-conference<\/code>&nbsp;that will allow specifying conference options:<br><code>ng generate component create-conference<\/code><\/li><li>Create the component&nbsp;<code>join-conference<\/code>&nbsp;that will allow entering some personal settings for participant:<br><code>ng generate component join-conference<\/code><\/li><li>Create the component&nbsp;<code>video-panel<\/code>&nbsp;that will serve video streams from all participants:<br><code>ng generate component video-panel<\/code><\/li><li>Create the component&nbsp;<code>video-player<\/code>&nbsp;that will display a particular video stream from conference participant:<br><code>ng generate component video-player<\/code><\/li><li>Create the component&nbsp;<code>participants<\/code>&nbsp;that will display a list of conference participants along with their statuses:<br><code>ng generate component participants<\/code><\/li><li>Create the component&nbsp;<code>top-bar<\/code>&nbsp;for an application header:<br><code>ng generate component top-bar<\/code><\/li><li>Create the component&nbsp;<code>welcome-page<\/code>&nbsp;for a start page:<br><code>ng generate component welcome-page<\/code><\/li><\/ol>\n\n\n\n<p>Now let&#8217;s configure paths in our application and add routing to&nbsp;<code>app.module.ts<\/code>:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">\/\/ imports\n \nconst Router = RouterModule.forRoot([\n  { path: &#039;&#039;, component: WelcomePageComponent },\n  { path: &#039;welcome-page&#039;, component: WelcomePageComponent },\n  { path: &#039;create-conference&#039;, component: CreateConferenceComponent },\n  { path: &#039;join-conference&#039;, component: JoinConferenceComponent },\n  { path: &#039;conference&#039;, component: ConferenceComponent },\n]);\n \n@NgModule(\n  declarations: [\n    \/\/ component declarations\n  ],\n  imports: [\n    Router,\n    \/\/ other imports\n  ],\n  providers: [\n    \/\/ ...\n  ]\n);<\/code><\/pre>\n\n\n\n<h2 id=\"HowtoUseDolby.ioVideoConferencingWithAngular-PrepareServices...\">Prepare Services&#8230;<\/h2>\n\n\n\n<p>Now it&#8217;s a time to add&nbsp;<a href=\"https:\/\/dolby.io\/\">Dolby.io<\/a>&nbsp;Interactivity APIs SDK&nbsp;to your application:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">npm install @voxeet\/voxeet-web-sdk@3.1.5 --save<\/code><\/pre>\n\n\n\n<p>The installed package contains classes and functions&nbsp;that enable video conferencing operation tools. The most important class for our application is&nbsp;<code>VoxeetSDK<\/code>&nbsp;that allows interaction with&nbsp;<a href=\"https:\/\/dolby.io\/\">Dolby.io<\/a>&nbsp;services. More information about&nbsp;<a href=\"https:\/\/dolby.io\/\">Dolby.io<\/a>&nbsp;Interactivity APIs can be found here: <a href=\"https:\/\/docs.dolby.io\/communications-apis\/docs\">https:\/\/docs.dolby.io\/communications-apis\/docs<\/a> <\/p>\n\n\n\n<p>The installed package contains classes and functions&nbsp;that enable video conferencing operation tools. The most important class for our application is&nbsp;VoxeetSDK&nbsp;that allows interaction with&nbsp;Dolby.io&nbsp;services. More information about&nbsp;Dolby.io&nbsp;Interactivity APIs can be found here: <a href=\"https:\/\/docs.dolby.io\/communications-apis\/docs\/js-overview\">https:\/\/docs.dolby.io\/communications-apis\/docs\/js-overview<\/a> <\/p>\n\n\n\n<p>As long as almost all methods in&nbsp;<code>VoxeetSDK<\/code>&nbsp;&nbsp;are static, you can use them directly, but&nbsp;I&#8217;d&nbsp;recommend adding your service, which will control access to&nbsp;<code>VoxeetSDK<\/code>&nbsp;&nbsp;methods:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">ng generate service conference<\/code><\/pre>\n\n\n\n<p>Before you can work with any SDK function, you must initialize it. There are several ways of initializing SDK, but here I&#8217;d suggest using the simplest one, an invocation of&nbsp;<code>VoxeetSDK.initialize()<\/code>&nbsp;method. More info about initialization you can read in this article:&nbsp;<a href=\"https:\/\/docs.dolby.io\/communications-apis\/docs\/initializing-javascript\">https:\/\/docs.dolby.io\/communications-apis\/docs\/initializing-javascript<\/a><\/p>\n\n\n\n<p>The&nbsp;Dolby.io&nbsp;SDK uses a pair of keys to access&nbsp;Dolby.io&nbsp;functionality, so it might be a good idea to not store those keys in source code but receive them from external storage. As such, I suggest using a service to manage your secrets within your project:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">ng generate service credentials-vault<\/code><\/pre>\n\n\n\n<p>The&nbsp;<code>credentials-vault<\/code>&nbsp;service may use external storage or use AWS as explained in the following article:&nbsp;<a href=\"https:\/\/dolby.io\/blog\/generate-access-tokens-using-aws-services\">https:\/\/dolby.io\/blog\/generate-access-tokens-using-aws-services<\/a><\/p>\n\n\n\n<p>The&nbsp;<code>conference<\/code>&nbsp;service has to be initialized at the application startup, so let&#8217;s add the following to the&nbsp;<code>app.module.ts<\/code>:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">\/\/ imports ...\n \nconst Router = \/\/... router declaration\n@NgModule(\n  declarations: [ ... ],\n  imports: [ ... ],\n  providers: [\n      ConferenceService,\n      {\n        provide: APP_INITIALIZER,\n        useFactory: (svc: ConferenceService) =&gt; () =&gt; svc.initialize(),\n        deps: [ConferenceService],\n        multi: true\n      }\n    ],\n);<\/code><\/pre>\n\n\n\n<p>Remember to add the method implementation to the&nbsp;<code>conference<\/code>&nbsp;service:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">export class ConferenceService {\n    constructor(\n        private credentialsVault: CredentialsVaultService\n    ) {}\n \n    async initialize() {\n        const credentials = await this.credentialsVault.getCredentials();\n        VoxeetSDK.initialize(credentials.key, credentials.secret);\n    }\n \n    \/\/ other methods\n}<\/code><\/pre>\n\n\n\n<h2 id=\"HowtoUseDolby.ioVideoConferencingWithAngular-PourLogic...\">Pour Logic&#8230;<\/h2>\n\n\n\n<p>The main magic will happen in the component&nbsp;<code>conference<\/code>&nbsp;that creates a video conference&nbsp;on Dolby.io&nbsp;and serves a communication between camera, microphone, video conference server. The component will instantiate video conference during the initialization stage:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">async ngOnInit(): Promise&lt;void&gt; {\n    \/\/ read conference id and participant name from URI\n    this.conferenceId = this.route.snapshot.paramMap.get(&#039;id&#039;);\n    this.name = this.route.snapshot.paramMap.get(&#039;name&#039;);\n \n    try {\n        \/\/ create conference or join to existing\n        const conf = await this.confService.join(\n            this.conferenceId,\n            this.name,\n            this.streamObserver\n        );\n        \/\/ other initialization steps\n        \/\/ ...\n    } catch (err) {\n        this.error = err;\n    }\n}<\/code><\/pre>\n\n\n\n<p>The&nbsp;<code>VoxeetSDK<\/code>&nbsp;uses an event-based model to inform about changes that happened within the conference. That means you have to add an observer object to control events receiving and acting accordingly. That object must&nbsp;implement the&nbsp;<code>Observer&lt;of type&gt;<\/code>&nbsp;interface&nbsp;from the&nbsp;<code>RxJs<\/code>&nbsp;library, and that object you should pass to the&nbsp;<code>ConferenceService.join()<\/code>&nbsp;method:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">private initStreamObserver() {\n    this.streamObserver = {\n        next: ({ peer, stream, eventType }) =&gt; {\n            if (eventType === &quot;streamAdded&quot;) {\n                this.videoPanel.addParticipant(peer, stream);\n            } else if (eventType === &quot;streamUpdated&quot;) {\n                this.videoPanel.updateParticipant(peer, stream);\n            } else {\n                this.videoPanel.removeParticipant(peer);\n            }\n        },\n        error: (errorMessage) =&gt; {\n            this.error = errorMessage;\n        },\n        complete: () =&gt; {\n        }\n    };\n}<\/code><\/pre>\n\n\n\n<p>An invocation of the method&nbsp;<code>join()<\/code>&nbsp;creates a video conference and joins a requester to it. If at the moment of&nbsp;<code>VoxeetSDK.conference.create()<\/code>&nbsp;invocation, the conference has already existed, the previously created conference will be returned:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">async join(alias: string, name: string, observer: Observer&lt;{ peer: Participant, stream: MediaStreamWithType, eventType: string }&gt;): Promise&lt;Conference&gt; {\n    this.streamObserver = observer;\n \n    \/\/ load conference details and settings from storage\n    const conferenceDefaults = await this.storage.load(alias);\n \n    \/\/ open session\n    await VoxeetSDK.session.open({ name });\n \n    const conferenceOptions = {\n        alias: conferenceDefaults.id,\n        params: { ...conferenceDefaults.options },\n    };\n    \/\/ create conference\n    const conference = await VoxeetSDK.conference.create(conferenceOptions);\n    \/\/ join to created conference\n    return await VoxeetSDK.conference.join(conference, {\n        constraints: { audio: true, video: false },\n    });\n}<\/code><\/pre>\n\n\n\n<p>We passed a stream observer to our&nbsp;<code>ConferenceService<\/code>&nbsp;instance, and the only thing left is connecting conference events with stream updates. For that we should register event handlers and&nbsp;call the&nbsp;<code>Observer.next()<\/code>&nbsp;method&nbsp;when a new event&nbsp;arrives.&nbsp;Let&#8217;s change the constructor of the&nbsp;<code>ConferenceService<\/code>&nbsp;class:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">export class ConferenceService {\n    private streamObserver: Observer&lt;{ peer: Participant, stream: MediaStreamWithType, eventType: string }&gt;;\n    private allowedEvents = [&quot;streamAdded&quot;, &quot;streamUpdated&quot;, &quot;streamRemoved&quot;];\n \n    constructor(\n        private storage: StorageService,\n        private credentialsVault: CredentialsVaultService\n    ) {\n        for (const eventType of this.allowedEvents) {\n            VoxeetSDK.conference.on(eventType, (peer: Participant, stream: MediaStreamWithType) =&gt; {\n                if (this.streamObserver) {\n                    this.streamObserver.next({ peer, stream, eventType });\n                }\n            });\n        }\n    }\n \n    \/\/ other methods\n}<\/code><\/pre>\n\n\n\n<p>We connected conference events with an observer, and those events leads to invocations of specific methods of the&nbsp;<code>video-panel<\/code>&nbsp;component. The&nbsp;<code>video-panel<\/code>&nbsp;component dynamically instantiates a&nbsp;<code>video-player<\/code>&nbsp;component for each participant, and controls its video stream by setting the property&nbsp;<code>stream<\/code>.<\/p>\n\n\n\n<p>The component&nbsp;<code>video-player<\/code>&nbsp;controls a video-stream playback. For doing that, it has a property&nbsp;<code>stream<\/code>, and, when it is assigned to a value, changes an underlying&nbsp;<code>&lt;video&gt;<\/code>&nbsp;tag:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">get stream() {\n    return this.videoStream;\n}\n \nset stream(value: MediaStreamWithType) {\n    this.videoStream = value;\n    if (this.video) {\n        if (this.videoStream != null &amp;&amp; this.videoStream.getVideoTracks().length) {\n            this.video.nativeElement.srcObject = this.videoStream;\n            this.video.nativeElement.play();\n        } else {\n            this.video.nativeElement.srcObject = null;\n        }\n    }\n}<\/code><\/pre>\n\n\n\n<h2 id=\"HowtoUseDolby.ioVideoConferencingWithAngular-What'sNext\">What&#8217;s Next<\/h2>\n\n\n\n<p>This article only begins to cover what can be done by integrating&nbsp;<a href=\"https:\/\/dolby.io\/\">Dolby.io<\/a>&nbsp;and Angular. The complete source code is available on the git repository: <a href=\"https:\/\/github.com\/dolbyio-samples\/blog-angular-videoconference\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/github.com\/dolbyio-samples\/blog-angular-videoconference<\/a> <\/p>\n\n\n\n<p>To get started, all you need to do is::<\/p>\n\n\n\n<ol><li>Register on Dolby.io and get processing minutes for free.<\/li><li>Download the source code.<\/li><li>Add the implementation for the method&nbsp;<code>CredentialsVaultService.getCredentials()<\/code>.<\/li><li>Deploy application on your favorite server<\/li><\/ol>\n","protected":false},"excerpt":{"rendered":"<p>Dolby.io enables video conferencing with the true power of voice by using Dolby Voice\u00ae technologies.<\/p>\n","protected":false},"author":26,"featured_media":2048,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_genesis_hide_title":false,"_genesis_hide_breadcrumbs":false,"_genesis_hide_singular_image":false,"_genesis_hide_footer_widgets":false,"_genesis_custom_body_class":"","_genesis_custom_post_class":"","_genesis_layout":""},"categories":[11,9],"tags":[57,12],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.2 (Yoast SEO v18.5.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>How to Use Dolby.io Video Conferencing with Angular<\/title>\n<meta name=\"description\" content=\"Dolby.io enables dynamic audio editing while Angular builds e-commerce sites with catalogs, shopping carts, and check-out forms. Together, they&#039;re unstoppable.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"How to Use Video Conferencing with Angular\" \/>\n<meta property=\"og:description\" content=\"Dolby.io enables video conferencing with the true power of voice by using Dolby Voice\u00ae technologies.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/\" \/>\n<meta property=\"og:site_name\" content=\"Dolby.io\" \/>\n<meta property=\"article:published_time\" content=\"2021-07-15T23:36:00+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-27T19:34:27+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1088\" \/>\n\t<meta property=\"og:image:height\" content=\"450\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Igor Goyda\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"7 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/dolby.io\/#organization\",\"name\":\"Dolby.io\",\"url\":\"https:\/\/dolby.io\/\",\"sameAs\":[],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/dolby.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/DolbyIO-favicon.png\",\"contentUrl\":\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/DolbyIO-favicon.png\",\"width\":512,\"height\":512,\"caption\":\"Dolby.io\"},\"image\":{\"@id\":\"https:\/\/dolby.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/dolby.io\/#website\",\"url\":\"https:\/\/dolby.io\/\",\"name\":\"Dolby.io\",\"description\":\"Dolby.io\",\"publisher\":{\"@id\":\"https:\/\/dolby.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/dolby.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular.jpg\",\"contentUrl\":\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular.jpg\",\"width\":1088,\"height\":450},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#webpage\",\"url\":\"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/\",\"name\":\"How to Use Dolby.io Video Conferencing with Angular\",\"isPartOf\":{\"@id\":\"https:\/\/dolby.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#primaryimage\"},\"datePublished\":\"2021-07-15T23:36:00+00:00\",\"dateModified\":\"2022-01-27T19:34:27+00:00\",\"description\":\"Dolby.io enables dynamic audio editing while Angular builds e-commerce sites with catalogs, shopping carts, and check-out forms. Together, they're unstoppable.\",\"breadcrumb\":{\"@id\":\"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/dolby.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"How to Use Video Conferencing with Angular\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#webpage\"},\"author\":{\"@id\":\"https:\/\/dolby.io\/#\/schema\/person\/c1f97c66ba19705618f076a53000f36c\"},\"headline\":\"How to Use Video Conferencing with Angular\",\"datePublished\":\"2021-07-15T23:36:00+00:00\",\"dateModified\":\"2022-01-27T19:34:27+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#webpage\"},\"wordCount\":1123,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/dolby.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular.jpg\",\"keywords\":[\"angular\",\"javascript\"],\"articleSection\":[\"Communications\",\"Developer\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/dolby.io\/#\/schema\/person\/c1f97c66ba19705618f076a53000f36c\",\"name\":\"Igor Goyda\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/dolby.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/9979d130b2d1f1e4f8ebfaea2029b89e?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/9979d130b2d1f1e4f8ebfaea2029b89e?s=96&d=mm&r=g\",\"caption\":\"Igor Goyda\"},\"url\":\"https:\/\/dolby.io\/blog\/author\/igoyd\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"How to Use Dolby.io Video Conferencing with Angular","description":"Dolby.io enables dynamic audio editing while Angular builds e-commerce sites with catalogs, shopping carts, and check-out forms. Together, they're unstoppable.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/","og_locale":"en_US","og_type":"article","og_title":"How to Use Video Conferencing with Angular","og_description":"Dolby.io enables video conferencing with the true power of voice by using Dolby Voice\u00ae technologies.","og_url":"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/","og_site_name":"Dolby.io","article_published_time":"2021-07-15T23:36:00+00:00","article_modified_time":"2022-01-27T19:34:27+00:00","og_image":[{"width":1088,"height":450,"url":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular.jpg","type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_misc":{"Written by":"Igor Goyda","Est. reading time":"7 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/dolby.io\/#organization","name":"Dolby.io","url":"https:\/\/dolby.io\/","sameAs":[],"logo":{"@type":"ImageObject","@id":"https:\/\/dolby.io\/#logo","inLanguage":"en-US","url":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/DolbyIO-favicon.png","contentUrl":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/DolbyIO-favicon.png","width":512,"height":512,"caption":"Dolby.io"},"image":{"@id":"https:\/\/dolby.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/dolby.io\/#website","url":"https:\/\/dolby.io\/","name":"Dolby.io","description":"Dolby.io","publisher":{"@id":"https:\/\/dolby.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/dolby.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#primaryimage","inLanguage":"en-US","url":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular.jpg","contentUrl":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular.jpg","width":1088,"height":450},{"@type":"WebPage","@id":"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#webpage","url":"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/","name":"How to Use Dolby.io Video Conferencing with Angular","isPartOf":{"@id":"https:\/\/dolby.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#primaryimage"},"datePublished":"2021-07-15T23:36:00+00:00","dateModified":"2022-01-27T19:34:27+00:00","description":"Dolby.io enables dynamic audio editing while Angular builds e-commerce sites with catalogs, shopping carts, and check-out forms. Together, they're unstoppable.","breadcrumb":{"@id":"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/dolby.io\/"},{"@type":"ListItem","position":2,"name":"How to Use Video Conferencing with Angular"}]},{"@type":"Article","@id":"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#article","isPartOf":{"@id":"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#webpage"},"author":{"@id":"https:\/\/dolby.io\/#\/schema\/person\/c1f97c66ba19705618f076a53000f36c"},"headline":"How to Use Video Conferencing with Angular","datePublished":"2021-07-15T23:36:00+00:00","dateModified":"2022-01-27T19:34:27+00:00","mainEntityOfPage":{"@id":"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#webpage"},"wordCount":1123,"commentCount":0,"publisher":{"@id":"https:\/\/dolby.io\/#organization"},"image":{"@id":"https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#primaryimage"},"thumbnailUrl":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular.jpg","keywords":["angular","javascript"],"articleSection":["Communications","Developer"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/dolby.io\/blog\/how-to-use-dolby-io-video-conferencing-with-angular\/#respond"]}]},{"@type":"Person","@id":"https:\/\/dolby.io\/#\/schema\/person\/c1f97c66ba19705618f076a53000f36c","name":"Igor Goyda","image":{"@type":"ImageObject","@id":"https:\/\/dolby.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/9979d130b2d1f1e4f8ebfaea2029b89e?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/9979d130b2d1f1e4f8ebfaea2029b89e?s=96&d=mm&r=g","caption":"Igor Goyda"},"url":"https:\/\/dolby.io\/blog\/author\/igoyd\/"}]}},"uagb_featured_image_src":{"full":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular.jpg",1088,450,false],"thumbnail":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular-150x150.jpg",150,150,true],"medium":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular-300x124.jpg",300,124,true],"medium_large":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular-768x318.jpg",768,318,true],"large":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular-1024x424.jpg",1024,424,true],"1536x1536":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular.jpg",1088,450,false],"2048x2048":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular.jpg",1088,450,false],"featured-page":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular-1088x400.jpg",1088,400,true],"gb-block-post-grid-landscape":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular-600x400.jpg",600,400,true],"gb-block-post-grid-square":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular-600x450.jpg",600,450,true]},"uagb_author_info":{"display_name":"Igor Goyda","author_link":"https:\/\/dolby.io\/blog\/author\/igoyd\/"},"uagb_comment_info":0,"uagb_excerpt":"Dolby.io enables video conferencing with the true power of voice by using Dolby Voice\u00ae technologies.","featured_image_src":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular-600x400.jpg","featured_image_src_square":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/How-to-Use-DolbyIO-Video-Conferencing-with-Angular-600x450.jpg","author_info":{"display_name":"Igor Goyda","author_link":"https:\/\/dolby.io\/blog\/author\/igoyd\/"},"_links":{"self":[{"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/posts\/935"}],"collection":[{"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/users\/26"}],"replies":[{"embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/comments?post=935"}],"version-history":[{"count":0,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/posts\/935\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/media\/2048"}],"wp:attachment":[{"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/media?parent=935"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/categories?post=935"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/tags?post=935"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}