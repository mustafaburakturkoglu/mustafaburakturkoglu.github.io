{"id":617,"date":"2021-01-21T03:03:51","date_gmt":"2021-01-21T11:03:51","guid":{"rendered":"http:\/\/wp-io.dolby.net\/?p=617"},"modified":"2022-04-12T09:33:30","modified_gmt":"2022-04-12T16:33:30","slug":"creating-a-custom-mixer-layout-for-streaming-a-conference","status":"publish","type":"post","link":"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/","title":{"rendered":"Creating a Custom Mixer Layout for Streaming"},"content":{"rendered":"\n<p>A&nbsp;mixer layout application is a web app that the Dolby Interactivity APIs platform uses to generate the layout for a recording or to live stream a conference. A single application can generate a different presentation depending on the target. The mix can be of either a live conference or of a conference that has been recorded. The output can be an MP4 video file or can be streamed to a&nbsp;<a href=\"https:\/\/en.wikipedia.org\/wiki\/Real-Time_Messaging_Protocol\">Real-Time Messaging Protocol<\/a>&nbsp;(RTMP) endpoint like YouTube or Facebook. The resulting presentation can contain the video from each participant, as well as screen shares, presentation files or videos being shared, and the size and position of each is under the control of the layout app. As participants join and leave, start and stop video streams or screen shares, presentation files or video sharing, the layout app is updated with these changes, allowing for a dynamic layout.<\/p>\n\n\n\n<p>When you record or live stream a conference, the&nbsp;<a href=\"https:\/\/dolby.io\/\">dolby.io<\/a>&nbsp;platform will use a default web application to generate the capture the video of your conference. This default mixer layout application is open source, based on React.JS and available on GitHub in the&nbsp;<a href=\"https:\/\/github.com\/voxeet\/voxeet-uxkit-web-mixerlayout\">voxeet-uxkit-web-mixerlayout<\/a>&nbsp;repository. If you wish to update this layout to match your corporate branding or have a custom logic you want to implement, just clone the repository, make your changes, publish it online and provide the URL in your dashboard on&nbsp;<a href=\"https:\/\/dolby.io\/\">dolby.io<\/a>.<\/p>\n\n\n\n<p>In this tutorial, will create a simple layout using JavaScript and jQuery that we can use for recording and live streaming. You can import any JavaScript library that you want into your application, you can connect to any backend you need to pull information from. The only thing you need to remember is that the web application, libraries and backends must be publicly accessible from our platform.<\/p>\n\n\n\n<p>After each of the following steps of this tutorial, you will find a link to the code so you can easily get the latest going.<\/p>\n\n\n\n<h2 id=\"CreatingaCustomMixerLayoutforStreamingaConference-Let'sgetstarted\">Let&#8217;s get started<\/h2>\n\n\n\n<p>Consider that we want to use the Dolby Interactivity APIs platform to host a series of webinar type of events that will be recorded and live streamed online. At the end of this tutorial, the goal is for you to understand how you can create your very own mixer layout application that matches your company&#8217;s branding so you can use to generate recordings or live stream to your end users.<\/p>\n\n\n\n<p>The mixer layout is a web application, so we are going to create a very simple html page with some JavaScript to generate a layout based on the dynamic of the conference. And to make things simpler, for our webinars, we will have no more than 2 participants with the video on. The hosts we will be able to play a video and start a screen share.<\/p>\n\n\n\n<p>Let&#8217;s start by create an empty file&nbsp;<code>script.js<\/code>, where we will write the logic of the application.<\/p>\n\n\n\n<p>The mixer is capturing the conference video in 1080p so we will use a background image background.png with a resolution of 1920&#215;1080 pixels. Create the CSS file&nbsp;<code>styles.css<\/code>&nbsp;to load the background picture in full screen. Use this file to customize the colors and define your company&#8217;s branding.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-css\">body {\n    background-image: url(&#039;background.jpg&#039;);\n    background-size: cover;\n    background-repeat: no-repeat;\n}<\/code><\/pre>\n\n\n\n<p>Now, create an html page&nbsp;<code>index.html<\/code>&nbsp;that contains a link to the&nbsp;<code>script.js<\/code>&nbsp;and&nbsp;<code>styles.css<\/code>&nbsp;files from the same folder:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-markup\">&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n\n    &lt;!-- Mixer layout script and styles --&gt;\n    &lt;script type=&quot;text\/javascript&quot; src=&quot;script.js&quot;&gt;&lt;\/script&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text\/css&quot; href=&quot;styles.css&quot; \/&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n    \n&lt;\/body&gt;\n&lt;\/html&gt;<\/code><\/pre>\n\n\n\n<p>We need our web application to load the&nbsp;<a href=\"https:\/\/www.npmjs.com\/package\/@voxeet\/voxeet-web-sdk\">Voxeet SDK<\/a>&nbsp;and to make our life easier, we will use&nbsp;<a href=\"https:\/\/jquery.com\/\">jQuery<\/a>&nbsp;to manipulate the DOM elements of our page. So add those scripts to the header of the HTML page:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-markup\">&lt;!-- Voxeet SDK and jQuery from the CDN unpkg.com --&gt;\n&lt;script type=&quot;text\/javascript&quot; src=&quot;https:\/\/unpkg.com\/@voxeet\/voxeet-web-sdk&quot;&gt;&lt;\/script&gt;\n&lt;script type=&quot;text\/javascript&quot; src=&quot;https:\/\/unpkg.com\/jquery&quot;&gt;&lt;\/script&gt;<\/code><\/pre>\n\n\n\n<p>I highly recommend you create a custom &#8220;device&#8221; in Google Chrome Developer Tools with the 1920&#215;1080 resolution (as pictured below) in order to get the same experience as in the output of the mixer.&nbsp;Open the file&nbsp;<code>index.html<\/code>&nbsp;in Chrome and this is what your web application should look like at this end of this first step.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"623\" src=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/02\/1-getting-started-1024x623.png\" alt=\"\" class=\"wp-image-5096\" srcset=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/02\/1-getting-started-1024x623.png 1024w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/02\/1-getting-started-300x183.png 300w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/02\/1-getting-started-768x468.png 768w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/02\/1-getting-started.png 1416w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<p>As of the publication of this article, the Dolby mixer application is using Chrome 87 to load the mixer web application. To make sure the result that you get out of the recording or the live stream is what you expect, please use the same version on your local development machine.<\/p>\n\n\n\n<p>Download the&nbsp;<a href=\"https:\/\/github.com\/dolbyio-samples\/blog-mixer-layout\/tree\/main\/1-getting-started\">source code<\/a>&nbsp;for this first step.<\/p>\n\n\n\n<h2 id=\"CreatingaCustomMixerLayoutforStreamingaConference-Layoutinitialization\">Layout initialization<\/h2>\n\n\n\n<p>The mixer layout application is a basic web site that has no idea what credentials to use to connect to the Dolby Interactivity APIs, or what conference to join&#8230; To provide these settings, when a mixer is requested to record or live stream a conference, it will start the website and inject all the required information into the HTML using input elements. When the mixer is ready to process the conference, it will simulate a click on one of a couple of buttons to tell your application to join or reply a conference. We do not need those elements to appear on the UI so we can hide them using the CSS class&nbsp;<code>hide<\/code>.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-css\">.hide {\n    display: none;\n}<\/code><\/pre>\n\n\n\n<p>Insert this code in the body of the HTML page.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-markup\">&lt;div class=&quot;hide&quot;&gt;\n    &lt;input type=&quot;hidden&quot; value=&quot;accessToken&quot; id=&quot;accessToken&quot; name=&quot;accessToken&quot;\/&gt;\n    &lt;input type=&quot;hidden&quot; value=&quot;refreshToken&quot; id=&quot;refreshToken&quot; name=&quot;refreshToken&quot;\/&gt;\n    &lt;input type=&quot;hidden&quot; value=&quot;refreshUrl&quot; id=&quot;refreshUrl&quot; name=&quot;refreshUrl&quot;\/&gt;\n    &lt;input type=&quot;hidden&quot; value=&quot;voxeet&quot; id=&quot;conferenceId&quot; name=&quot;conferenceId&quot;\/&gt;\n    &lt;input type=&quot;hidden&quot; value=&quot;1234&quot; id=&quot;thirdPartyId&quot; name=&quot;thirdPartyId&quot;\/&gt;\n    &lt;input type=&quot;hidden&quot; value=&quot;stream&quot; id=&quot;layoutType&quot; name=&quot;layoutType&quot;\/&gt;\n    &lt;button id=&quot;joinConference&quot;&gt;Join conference&lt;\/button&gt;\n    &lt;button id=&quot;replayConference&quot;&gt;Replay conference&lt;\/button&gt;\n&lt;\/div&gt;<\/code><\/pre>\n\n\n\n<p>We create the&nbsp;<code>initializeVoxeetSDK()<\/code>&nbsp;function in our JavaScript file that uses the&nbsp;<code>accessToken<\/code>,&nbsp;<code>refreshToken<\/code>&nbsp;and&nbsp;<code>refreshUrl<\/code>&nbsp;settings injected by the mixer to initialize the Voxeet SDK.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">\/\/ Initialize the SDK with the access token\nconst initializeVoxeetSDK = () =&gt; {\n    \/\/ Load the settings injected by the mixer\n    const accessToken = $(&quot;#accessToken&quot;).val();\n    const refreshToken = $(&quot;#refreshToken&quot;).val();\n    const refreshUrl = $(&quot;#refreshUrl&quot;).val();\n\n    \/\/ Reference: https:\/\/dolby.io\/developers\/interactivity-apis\/client-sdk\/reference-javascript\/voxeetsdk#static-initializetoken\n    VoxeetSDK.initializeToken(accessToken, () =&gt;\n        fetch(refreshUrl, {\n            method: &#039;POST&#039;,\n            headers: {\n                &#039;Content-Type&#039;: &#039;application\/json&#039;,\n                &#039;Authorization&#039;: &#039;Bearer &#039; + accessToken\n            },\n            body: { refresh_token: refreshToken }\n        }).then(d =&gt; d.json().access_token)\n    );\n};<\/code><\/pre>\n\n\n\n<p>When the mixer is ready to start its job, it will be waiting for a\u00a0<code>div<\/code>\u00a0element with the id\u00a0<code>conferenceStartedVoxeet<\/code>\u00a0to be present in the DOM. When the document is ready, we can use jQuery to create that div at the end of the body of our web page. This empty div will not be visible in the layout, it is just a way to signal the mixer that the application is ready to roll. Right before creating the div element, this is where you might want to customize your application UI based on the type of layout requested by the mixer. We will do just that in the\u00a0Layout type\u00a0section.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">$(document).ready(() =&gt; {\n    \/\/ Inform the mixer that the application is ready to start\n    $(&quot;&lt;div \/&gt;&quot;).attr(&quot;id&quot;, &quot;conferenceStartedVoxeet&quot;).appendTo(&quot;body&quot;);\n});<\/code><\/pre>\n\n\n\n<p>With the same concept, our application needs to signal the mixer when the conference we are recording or streaming has ended. To do so, we need to create a&nbsp;<code>div<\/code>&nbsp;element in the DOM of the web page with the id&nbsp;<code>conferenceEndedVoxeet<\/code>. We will capture the events&nbsp;<code>left<\/code>&nbsp;and&nbsp;<code>ended<\/code>&nbsp;from the conference object in the Voxeet SDK. When the mixer detects this div element, it will safely exit and move onto the next job.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const onConferenceEnded = () =&gt; {\n    $(&#039;#conferenceStartedVoxeet&#039;).remove();\n    $(&#039;body&#039;).append(&#039;&lt;div id=&quot;conferenceEndedVoxeet&quot;&gt;&lt;\/div&gt;&#039;);\n};\n\nVoxeetSDK.conference.on(&quot;left&quot;, onConferenceEnded);\nVoxeetSDK.conference.on(&quot;ended&quot;, onConferenceEnded);<\/code><\/pre>\n\n\n\n<p>When a mixer joins a live conference that you want to record or live stream, it will simulate a click on the&nbsp;<code>joinConference<\/code>&nbsp;button. We need to trigger an action when it happens.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">$(&quot;#joinConference&quot;).click(() =&gt; {\n    \/\/ Initialize the SDK\n    initializeVoxeetSDK();\n\n    \/\/ Load the settings injected by the mixer\n    const conferenceId = $(&quot;conferenceId&quot;).val();\n    const thirdPartyId = $(&quot;thirdPartyId&quot;).val();\n    const layoutType = $(&quot;layoutType&quot;).val();\n\n    const mixer = {\n        name: &quot;Mixer&quot;,\n        externalId: &quot;Mixer_&quot; + layoutType,\n        thirdPartyId: thirdPartyId,\n    };\n\n    const joinOptions = {\n        constraints: {\n            video: false,\n            audio: false\n        },\n        mixing: {\n            enabled: true\n        },\n        userParams: {},\n        audio3D: false\n    };\n    \n    \/\/ Open a session for the mixer\n    VoxeetSDK.session.open(mixer)\n        .then(() =&gt; VoxeetSDK.conference.fetch(conferenceId))\n        \/\/ Join the conference\n        .then((conference) =&gt; VoxeetSDK.conference.join(conference, joinOptions))\n        .catch((err) =&gt; console.log(err));\n});<\/code><\/pre>\n\n\n\n<p>When a mixer is requested to record a conference&nbsp;that has already&nbsp;happened, it will simulate a click on the&nbsp;<code>replayConference<\/code>&nbsp;button. We need to trigger an action when it happens.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">$(&quot;#replayConference&quot;).click(() =&gt; {\n    \/\/ Initialize the SDK\n    initializeVoxeetSDK();\n\n    \/\/ Load the settings injected by the mixer\n    const conferenceId = $(&quot;conferenceId&quot;).val();\n    const thirdPartyId = $(&quot;thirdPartyId&quot;).val();\n    const layoutType = $(&quot;layoutType&quot;).val();\n\n    const mixer = {\n        name: &quot;Mixer&quot;,\n        externalId: &quot;Mixer_&quot; + layoutType,\n        thirdPartyId: thirdPartyId\n    };\n    \n    \/\/ Open a session for the mixer\n    VoxeetSDK.session.open(mixer)\n        .then(() =&gt; VoxeetSDK.conference.fetch(conferenceId))\n        \/\/ Replay the conference from the beginning\n        .then((conference) =&gt; VoxeetSDK.conference.replay(conference, 0, { enabled: true}))\n        .catch((err) =&gt; console.log(err));\n});<\/code><\/pre>\n\n\n\n<p>The base of our layout application is ready, the mixer is capable of running your application, joining (or replaying) a conference and releasing the resources at the end of it. In the next step we will start creating our custom presentation.<\/p>\n\n\n\n<p>Download the&nbsp;<a href=\"https:\/\/github.com\/dolbyio-samples\/blog-mixer-layout\/tree\/main\/2-layout-initialization\">source code<\/a>&nbsp;for this second step.<\/p>\n\n\n\n<h2 id=\"CreatingaCustomMixerLayoutforStreamingaConference-Custompresentation\">Custom presentation<\/h2>\n\n\n\n<p>We want to build a webinar type of event with the following characteristics:<\/p>\n\n\n\n<ul><li>Up to two participants with video turned on.<\/li><li>When someone requests to play a video, we will have the video player taking the whole screen.<\/li><li>A participant screenshare will be displayed in a larger area on the side of the layout.<\/li><\/ul>\n\n\n\n<p>At the end of the&nbsp;<code>body<\/code>&nbsp;in the HTML code, add the following container to host the video streams from the participants.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-markup\">&lt;div id=&quot;videos-container&quot;&gt;&lt;\/div&gt;<\/code><\/pre>\n\n\n\n<p>In the JavaScript code, create the function&nbsp;<code>addVideoNode(participant, stream)<\/code>&nbsp;to add a video element when a participant joins the conference and the function&nbsp;<code>removeVideoNode(participant)<\/code>&nbsp;to remove the video element when the participant leaves or turns off the webcam.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">\/\/ Add the video stream to the web page\nconst addVideoNode = (participant, stream) =&gt; {\n    let participantNode = $(&#039;#participant-&#039; + participant.id);\n\n    if (!participantNode.length) {\n        participantNode = $(&#039;&lt;div \/&gt;&#039;)\n            .attr(&#039;id&#039;, &#039;participant-&#039; + participant.id)\n            .addClass(&#039;container&#039;)\n            .appendTo(&#039;#videos-container&#039;);\n\n        $(&#039;&lt;video \/&gt;&#039;)\n            .attr(&#039;autoplay&#039;, &#039;autoplay&#039;)\n            .attr(&#039;muted&#039;, true)\n            .appendTo(participantNode);\n\n        \/\/ Add a temporary banner with the name of the participant\n        let name = $(&#039;&lt;p \/&gt;&#039;).text(participant.info.name);\n        let bannerName = $(&#039;&lt;div \/&gt;&#039;)\n            .addClass(&#039;name-banner&#039;)\n            .append(name)\n            .appendTo(participantNode);\n\n        \/\/ Remove the banner after 15 seconds\n        setInterval(() =&gt; bannerName.remove(), 15000);\n    }\n\n    \/\/ Attach the stream to the video element\n    navigator.attachMediaStream(participantNode.find(&#039;video&#039;).get(0), stream);\n};\n\n\/\/ Remove the video stream from the web page\nconst removeVideoNode = (participant) =&gt; {\n    $(&#039;#participant-&#039; + participant.id).remove();\n};<\/code><\/pre>\n\n\n\n<p>Still in the JavaScript code, create the function&nbsp;<code>addScreenShareNode(stream)<\/code>&nbsp;to add the video element for when someone turns on screensharing and create the function&nbsp;<code>removeScreenShareNode()<\/code>&nbsp;to remove it when the screensharing is stopped.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">\/\/ Add a screen share stream to the web page\nconst addScreenShareNode = (stream) =&gt; {\n    let screenshareNode = $(&#039;&lt;div \/&gt;&#039;)\n        .attr(&#039;id&#039;, &#039;screenshare&#039;)\n        .appendTo(&#039;body&#039;);\n\n    let container = $(&#039;&lt;div \/&gt;&#039;)\n        .addClass(&#039;container&#039;)\n        .appendTo(screenshareNode);\n\n    let screenShareNode = $(&#039;&lt;video \/&gt;&#039;)\n        .attr(&#039;autoplay&#039;, &#039;autoplay&#039;)\n        .appendTo(container);\n\n    \/\/ Attach the stream to the video element\n    navigator.attachMediaStream(screenShareNode.get(0), stream);\n}\n\n\/\/ Remove the screen share stream from the web page\nconst removeScreenShareNode = () =&gt; {\n    $(&#039;#screenshare&#039;).remove();\n}<\/code><\/pre>\n\n\n\n<p>When a participant requests to play a video, create the function&nbsp;<code>addVideoPlayer(videoUrl)<\/code>&nbsp;to create a video player and start the video in full screen. Create the function&nbsp;<code>removeVideoPlayer()<\/code>&nbsp;to remove the video element once the video is stopped. There are a couple more functions that we can add to support all the scenarios about the video:&nbsp;<code>seekVideoPlayer(timestamp)<\/code>&nbsp;and&nbsp;<code>pauseVideoPlayer()<\/code>.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">\/\/ Add a Video player to the web page\nconst addVideoPlayer = (videoUrl) =&gt; {\n    $(&#039;&lt;video \/&gt;&#039;)\n        .attr(&#039;id&#039;, &#039;video-url-player&#039;)\n        .attr(&#039;src&#039;, videoUrl)\n        .attr(&#039;autoplay&#039;, &#039;autoplay&#039;)\n        .attr(&#039;playsinline&#039;, &#039;true&#039;)\n        .appendTo(&#039;body&#039;);\n};\n\n\/\/ Move the cursor in the video\nconst seekVideoPlayer = (timestamp) =&gt; {\n    $(&#039;#video-url-player&#039;)[0].currentTime = timestamp;\n};\n\n\/\/ Pause the video\nconst pauseVideoPlayer = () =&gt; {\n    $(&#039;#video-url-player&#039;)[0].pause();\n};\n\n\/\/ Play the video\nconst playVideoPlayer = () =&gt; {\n    $(&#039;#video-url-player&#039;)[0].play();\n};\n\n\/\/ Remove the Video player from the web page\nconst removeVideoPlayer = () =&gt; {\n    $(&#039;#video-url-player&#039;).remove();\n};<\/code><\/pre>\n\n\n\n<p>Here is the CSS that will make this UI look better.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-css\">.container {\n    border: 4px solid white;\n    border-radius: 4px;\n    background-color: black;\n    margin: 20px;\n}\n\n#videos-container {\n    width: 30%;\n    height: 100%;\n    float: left;\n}\n\n#videos-container .container {\n    margin-right: 10px;\n    position: relative;\n}\n\n.name-banner {\n    position: absolute;\n    bottom: 10px;\n    left: -20px;\n    right: 0;\n    background-image: linear-gradient(to right, #1E2DFF, #1264FF);\n    color: white;\n}\n\n.name-banner p {\n    margin: 8px 30px;\n}\n\n#screenshare {\n    width: 70%;\n    height: 100%;\n    float: right;\n}\n\n#screenshare .container {\n    margin-left: 10px;\n}\n\nvideo {\n    width: 100%;\n    height: auto;\n}\n\n\/* Display a video player in full screen *\/\n#video-url-player {\n    z-index: 10000;\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    object-fit: contain;\n    background-color: black;\n}<\/code><\/pre>\n\n\n\n<p>This is what the UI will look like when we add two participants and one screenshare.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/01\/3-custom-presentation-1024x576.png\" alt=\"\" class=\"wp-image-4894\" srcset=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/01\/3-custom-presentation-1024x576.png 1024w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/01\/3-custom-presentation-300x169.png 300w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/01\/3-custom-presentation-768x432.png 768w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/01\/3-custom-presentation.png 1280w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<p>Download the&nbsp;<a href=\"https:\/\/github.com\/dolbyio-samples\/blog-mixer-layout\/tree\/main\/3-custom-presentation\">source code<\/a>&nbsp;for this third step.<\/p>\n\n\n\n<h2 id=\"CreatingaCustomMixerLayoutforStreamingaConference-ConnecttheVoxeetSDKtoourlayout\">Connect the Voxeet SDK to our layout<\/h2>\n\n\n\n<p>Let&#8217;s recap what we have done so far. We have a web application that our mixer will load and where it can inject the connection parameters. We have the code to initialize the Voxeet SDK, functions to add and remove the different video elements we need for the conference. The last step for this layout application to work is to connect the Voxeet SDK to the logic of our application.<\/p>\n\n\n\n<p>Create a new JavaScript file called&nbsp;<code>events.js<\/code>&nbsp;and reference it from the HTML code.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-markup\">&lt;!-- Mixer layout script and styles --&gt;\n&lt;script type=&quot;text\/javascript&quot; src=&quot;script.js&quot;&gt;&lt;\/script&gt;\n&lt;script type=&quot;text\/javascript&quot; src=&quot;events.js&quot;&gt;&lt;\/script&gt;\n&lt;link rel=&quot;stylesheet&quot; type=&quot;text\/css&quot; href=&quot;styles.css&quot; \/&gt;<\/code><\/pre>\n\n\n\n<p>This&nbsp;<code>events.js<\/code>&nbsp;will subscribe to the conference events&nbsp;<code>streamAdded<\/code>,&nbsp;<code>streamUpdated<\/code>&nbsp;and&nbsp;<code>streamRemoved<\/code>&nbsp;and add or remove video elements from the layout.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">\/\/ When a video stream is added to the conference\nVoxeetSDK.conference.on(&#039;streamAdded&#039;, (participant, stream) =&gt; {\n    console.log(`Event - streamAdded from ${participant.info.name} (${participant.id})`);\n\n    if (stream.type === &#039;ScreenShare&#039;) {\n        addScreenShareNode(stream);\n    } else if (stream.getVideoTracks().length) {\n        \/\/ Only add the video node if there is a video track\n        addVideoNode(participant, stream);\n    }\n});\n\n\/\/ When a video stream is updated from the conference\nVoxeetSDK.conference.on(&#039;streamUpdated&#039;, (participant, stream) =&gt; {\n    console.log(`Event - streamUpdated from ${participant.info.name} (${participant.id})`);\n\n    if (stream.type === &#039;ScreenShare&#039;) return;\n\n    if (stream.getVideoTracks().length) {\n        \/\/ Only add the video node if there is a video track\n        addVideoNode(participant, stream);\n    } else {\n        removeVideoNode(participant);\n    }\n});\n\n\/\/ When a video stream is removed from the conference\nVoxeetSDK.conference.on(&#039;streamRemoved&#039;, (participant, stream) =&gt; {\n    console.log(`Event - streamRemoved from ${participant.info.name} (${participant.id})`);\n\n    if (stream.type === &#039;ScreenShare&#039;) {\n        removeScreenShareNode();\n    } else {\n        removeVideoNode(participant);\n    }\n});<\/code><\/pre>\n\n\n\n<p>As well as the video presentation events&nbsp;<code>started<\/code>,&nbsp;<code>paused<\/code>,&nbsp;<code>played<\/code>,&nbsp;<code>sought<\/code>&nbsp;and&nbsp;<code>stopped<\/code>.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">VoxeetSDK.videoPresentation.on(&quot;started&quot;, (vp) =&gt; {\n    console.log(`Event - videoPresentation started ${vp.url}`);\n    addVideoPlayer(vp.url);\n    seekVideoPlayer(vp.timestamp);\n});\n\nVoxeetSDK.videoPresentation.on(&quot;paused&quot;, (vp) =&gt; {\n    console.log(&#039;Event - videoPresentation paused&#039;);\n    pauseVideoPlayer();\n});\n\nVoxeetSDK.videoPresentation.on(&quot;played&quot;, (vp) =&gt; {\n    console.log(&#039;Event - videoPresentation played&#039;);\n    playVideoPlayer();\n});\n\nVoxeetSDK.videoPresentation.on(&quot;sought&quot;, (vp) =&gt; {\n    console.log(&#039;Event - videoPresentation sought&#039;);\n    seekVideoPlayer(vp.timestamp);\n});\n\nVoxeetSDK.videoPresentation.on(&quot;stopped&quot;, () =&gt; {\n    console.log(&#039;Event - videoPresentation stopped&#039;);\n    removeVideoPlayer();\n});<\/code><\/pre>\n\n\n\n<p>And that&#8217;s it, we now have&nbsp;a fully working custom mixer layout application.<\/p>\n\n\n\n<p>Download the&nbsp;<a href=\"https:\/\/github.com\/dolbyio-samples\/blog-mixer-layout\/tree\/main\/4-connect-sdk\">source code<\/a>&nbsp;for this fourth step.<\/p>\n\n\n\n<h2 id=\"CreatingaCustomMixerLayoutforStreamingaConference-Layouttype\">Layout type<\/h2>\n\n\n\n<p>There are four possible layout types that can be requested of the mixer layout application:<\/p>\n\n\n\n<ul><li><code>record<\/code>, which is used to record live conference<\/li><li><code>replay<\/code>, which is used to record a replay of a conference<\/li><li><code>stream<\/code>, which is used to stream to an RTMP endpoint like YouTube or Facebook<\/li><li><code>hls<\/code>, which is used for streaming using HLS<\/li><\/ul>\n\n\n\n<p>To illustrate this, for the live streaming (<code>stream<\/code>&nbsp;and&nbsp;<code>hls<\/code>) we will display the typical red circle in the bottom corner of the screen to tell the end users they are watching it live.<\/p>\n\n\n\n<p>At the end of the HTML body, add the following code:<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-markup\">&lt;div id=&quot;live&quot; class=&quot;hide&quot;&gt;\n    &lt;div class=&quot;circle&quot;&gt;&lt;\/div&gt;\n    &lt;span&gt;Live&lt;\/span&gt;\n&lt;\/div&gt;<\/code><\/pre>\n\n\n\n<p>In the CSS file add the following style of the live message.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-css\">#live {\n    position: absolute;\n    bottom: 20px;\n    right: 20px;\n    padding: 8px 12px;\n    border-radius: 5px;\n    background-color: rgba(0, 0, 0, .25);\n    color: white;\n}\n\n#live .circle {\n    width: 14px;\n    height: 14px;\n    border-radius: 14px;\n    background-color: red;\n    float: left;\n    margin: 2px 8px 2px 0;\n}<\/code><\/pre>\n\n\n\n<p>And in the JavaScript, when the document is ready&nbsp;<code>$(document).ready(() =&gt; { });<\/code>, before adding the div&nbsp;<code>conferenceStartedVoxeet<\/code>, get the value of the&nbsp;<code>layoutType<\/code>&nbsp;property and if it contains&nbsp;<code>stream<\/code>&nbsp;or&nbsp;<code>hls<\/code>&nbsp;then we display the live message.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const layoutType = $(&quot;layoutType&quot;).val();\nif (layoutType === &quot;stream&quot; || layoutType === &quot;hls&quot;) {\n    \/\/ Display the live message for the live streams\n    $(&#039;#live&#039;).removeClass(&#039;hide&#039;);\n}<\/code><\/pre>\n\n\n\n<p>This is what the&nbsp;live message looks like.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"576\" src=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/01\/5-layout-type-1024x576.png\" alt=\"\" class=\"wp-image-4895\" srcset=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/01\/5-layout-type-1024x576.png 1024w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/01\/5-layout-type-300x169.png 300w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/01\/5-layout-type-768x432.png 768w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/01\/5-layout-type.png 1280w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<p>Download the&nbsp;<a href=\"https:\/\/github.com\/dolbyio-samples\/blog-mixer-layout\/tree\/main\/5-layout-type\">source code<\/a>&nbsp;for this fourth step.<\/p>\n\n\n\n<h2 id=\"CreatingaCustomMixerLayoutforStreamingaConference-Testyourlayout\">Test your layout<\/h2>\n\n\n\n<p>Because testing your layout before publishing is very important,&nbsp;you can start a conference using another application (like the&nbsp;<a href=\"https:\/\/github.com\/voxeet\/voxeet-sdk-browser-gettingstarted\">getting started<\/a>)&nbsp;and join it with this application by adding some JavaScript at the end of the&nbsp;<code>$(document).ready(() =&gt; { });<\/code>. Set the&nbsp;<code>consumerKey<\/code>,&nbsp;<code>consumerSecret<\/code>&nbsp;and&nbsp;<code>conferenceId<\/code>&nbsp;so the script can join the conference.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">\/\/ Insert your consumer key, secret and conference id\nconst consumerKey = &quot;&quot;;\nconst consumerSecret = &quot;&quot;;\nconst conferenceId = &quot;&quot;;\n\nVoxeetSDK.initialize(consumerKey, consumerSecret);\n\nconst mixer = { name: &quot;Test&quot;, externalId: &quot;Test&quot; };\nconst joinOptions = { constraints: { video: false, audio: false } };\n\n\/\/ Open a session for the mixer\nVoxeetSDK.session.open(mixer)\n    .then(() =&gt; VoxeetSDK.conference.fetch(conferenceId))\n    \/\/ Join the conference\n    .then((conference) =&gt; VoxeetSDK.conference.join(conference, joinOptions))\n    .catch((err) =&gt; console.log(err));<\/code><\/pre>\n\n\n\n<p><strong>IMPORTANT<\/strong>&nbsp;&#8211; make sure to remove this code before you publish your application. The mixer will automatically inject the access token to connect the Voxeet SDK to the Dolby Interactivity APIs.<\/p>\n\n\n\n<p>Download the&nbsp;<a href=\"https:\/\/github.com\/dolbyio-samples\/blog-mixer-layout\/tree\/main\/6-test-your-layout\">source code<\/a>&nbsp;for this step.<\/p>\n\n\n\n<h2 id=\"CreatingaCustomMixerLayoutforStreamingaConference-Publishyourlayout\">Publish your layout<\/h2>\n\n\n\n<p>Now that you are ready to record and stream your conferences, copy the files of your custom mixer layout application and&nbsp;publish it on your web server.<\/p>\n\n\n\n<p><strong>Note<\/strong>: a simple file storage is enough, you do not need a backend, but the files must be publicly available for our mixer infrastructure to access.<\/p>\n\n\n\n<p>Connect to the&nbsp;<a href=\"https:\/\/dolby.io\/\">dolby.io<\/a>&nbsp;dashboard, in the settings of your application, provide the URL of your mixer layout application.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"407\" src=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/01\/dolby-io-settings-url-1024x407.png\" alt=\"\" class=\"wp-image-4896\" srcset=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/01\/dolby-io-settings-url-1024x407.png 1024w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/01\/dolby-io-settings-url-300x119.png 300w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/01\/dolby-io-settings-url-768x305.png 768w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/01\/dolby-io-settings-url.png 1135w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<p>When you request to record to start streaming your conference, we will start a mixer in our environment that will launch the web site URL that you have provided.<\/p>\n\n\n\n<h2 id=\"CreatingaCustomMixerLayoutforStreamingaConference-Resources\">Resources<\/h2>\n\n\n\n<p>You now have a custom layout ready to live stream and record your conferences. If you want to go further, please visit the following resources:<\/p>\n\n\n\n<ul><li><a href=\"https:\/\/dolby.io\/\">https:\/\/dolby.io<\/a><\/li><li><a href=\"https:\/\/docs.dolby.io\/communications-apis\/docs\/guides-recording-mechanisms\">https:\/\/docs.dolby.io\/communications-apis\/docs\/guides-recording-mechanisms<\/a><\/li><li><a href=\"https:\/\/github.com\/voxeet\/voxeet-uxkit-web-mixerlayout\">https:\/\/github.com\/voxeet\/voxeet-uxkit-web-mixerlayout<\/a><\/li><li><a href=\"https:\/\/github.com\/dolbyio-samples\/comms-sdk-web-getting-started\">https:\/\/github.com\/dolbyio-samples\/comms-sdk-web-getting-started<\/a><\/li><\/ul>\n","protected":false},"excerpt":{"rendered":"<p>A mixer layout application is a web app that the Dolby.io Communications APIs use to generate the layout for a recording or to live stream a conference.<\/p>\n","protected":false},"author":19,"featured_media":2023,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_genesis_hide_title":false,"_genesis_hide_breadcrumbs":false,"_genesis_hide_singular_image":false,"_genesis_hide_footer_widgets":false,"_genesis_custom_body_class":"","_genesis_custom_post_class":"","_genesis_layout":""},"categories":[11,9],"tags":[12,35],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.2 (Yoast SEO v18.5.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Creating a Custom Mixer Layout for Streaming - Dolby.io<\/title>\n<meta name=\"description\" content=\"A mixer layout application is a web app that the Dolby.io Communications APIs use to generate the layout for a recording or to live stream a conference.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Creating a Custom Mixer Layout for Streaming\" \/>\n<meta property=\"og:description\" content=\"A mixer layout application is a web app that the Dolby.io Communications APIs use to generate the layout for a recording or to live stream a conference.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/\" \/>\n<meta property=\"og:site_name\" content=\"Dolby.io\" \/>\n<meta property=\"article:published_time\" content=\"2021-01-21T11:03:51+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-04-12T16:33:30+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1088\" \/>\n\t<meta property=\"og:image:height\" content=\"450\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Fabien Lavocat\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"14 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/dolby.io\/#organization\",\"name\":\"Dolby.io\",\"url\":\"https:\/\/dolby.io\/\",\"sameAs\":[],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/dolby.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/DolbyIO-favicon.png\",\"contentUrl\":\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/DolbyIO-favicon.png\",\"width\":512,\"height\":512,\"caption\":\"Dolby.io\"},\"image\":{\"@id\":\"https:\/\/dolby.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/dolby.io\/#website\",\"url\":\"https:\/\/dolby.io\/\",\"name\":\"Dolby.io\",\"description\":\"Dolby.io\",\"publisher\":{\"@id\":\"https:\/\/dolby.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/dolby.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg\",\"contentUrl\":\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg\",\"width\":1088,\"height\":450},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#webpage\",\"url\":\"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/\",\"name\":\"Creating a Custom Mixer Layout for Streaming - Dolby.io\",\"isPartOf\":{\"@id\":\"https:\/\/dolby.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#primaryimage\"},\"datePublished\":\"2021-01-21T11:03:51+00:00\",\"dateModified\":\"2022-04-12T16:33:30+00:00\",\"description\":\"A mixer layout application is a web app that the Dolby.io Communications APIs use to generate the layout for a recording or to live stream a conference.\",\"breadcrumb\":{\"@id\":\"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/dolby.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Creating a Custom Mixer Layout for Streaming\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#webpage\"},\"author\":{\"@id\":\"https:\/\/dolby.io\/#\/schema\/person\/c2e43849f218a168b4093d136613c041\"},\"headline\":\"Creating a Custom Mixer Layout for Streaming\",\"datePublished\":\"2021-01-21T11:03:51+00:00\",\"dateModified\":\"2022-04-12T16:33:30+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#webpage\"},\"wordCount\":2020,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/dolby.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg\",\"keywords\":[\"javascript\",\"streaming\"],\"articleSection\":[\"Communications\",\"Developer\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#respond\"]}]},{\"@type\":\"Person\",\"@id\":\"https:\/\/dolby.io\/#\/schema\/person\/c2e43849f218a168b4093d136613c041\",\"name\":\"Fabien Lavocat\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/dolby.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/0fc56a90b3eff450d8ead43738f18a2c?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/0fc56a90b3eff450d8ead43738f18a2c?s=96&d=mm&r=g\",\"caption\":\"Fabien Lavocat\"},\"url\":\"https:\/\/dolby.io\/blog\/author\/flavo\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Creating a Custom Mixer Layout for Streaming - Dolby.io","description":"A mixer layout application is a web app that the Dolby.io Communications APIs use to generate the layout for a recording or to live stream a conference.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/","og_locale":"en_US","og_type":"article","og_title":"Creating a Custom Mixer Layout for Streaming","og_description":"A mixer layout application is a web app that the Dolby.io Communications APIs use to generate the layout for a recording or to live stream a conference.","og_url":"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/","og_site_name":"Dolby.io","article_published_time":"2021-01-21T11:03:51+00:00","article_modified_time":"2022-04-12T16:33:30+00:00","og_image":[{"width":1088,"height":450,"url":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg","type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_misc":{"Written by":"Fabien Lavocat","Est. reading time":"14 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/dolby.io\/#organization","name":"Dolby.io","url":"https:\/\/dolby.io\/","sameAs":[],"logo":{"@type":"ImageObject","@id":"https:\/\/dolby.io\/#logo","inLanguage":"en-US","url":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/DolbyIO-favicon.png","contentUrl":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/DolbyIO-favicon.png","width":512,"height":512,"caption":"Dolby.io"},"image":{"@id":"https:\/\/dolby.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/dolby.io\/#website","url":"https:\/\/dolby.io\/","name":"Dolby.io","description":"Dolby.io","publisher":{"@id":"https:\/\/dolby.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/dolby.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#primaryimage","inLanguage":"en-US","url":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg","contentUrl":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg","width":1088,"height":450},{"@type":"WebPage","@id":"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#webpage","url":"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/","name":"Creating a Custom Mixer Layout for Streaming - Dolby.io","isPartOf":{"@id":"https:\/\/dolby.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#primaryimage"},"datePublished":"2021-01-21T11:03:51+00:00","dateModified":"2022-04-12T16:33:30+00:00","description":"A mixer layout application is a web app that the Dolby.io Communications APIs use to generate the layout for a recording or to live stream a conference.","breadcrumb":{"@id":"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/dolby.io\/"},{"@type":"ListItem","position":2,"name":"Creating a Custom Mixer Layout for Streaming"}]},{"@type":"Article","@id":"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#article","isPartOf":{"@id":"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#webpage"},"author":{"@id":"https:\/\/dolby.io\/#\/schema\/person\/c2e43849f218a168b4093d136613c041"},"headline":"Creating a Custom Mixer Layout for Streaming","datePublished":"2021-01-21T11:03:51+00:00","dateModified":"2022-04-12T16:33:30+00:00","mainEntityOfPage":{"@id":"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#webpage"},"wordCount":2020,"commentCount":0,"publisher":{"@id":"https:\/\/dolby.io\/#organization"},"image":{"@id":"https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#primaryimage"},"thumbnailUrl":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg","keywords":["javascript","streaming"],"articleSection":["Communications","Developer"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/dolby.io\/blog\/creating-a-custom-mixer-layout-for-streaming-a-conference\/#respond"]}]},{"@type":"Person","@id":"https:\/\/dolby.io\/#\/schema\/person\/c2e43849f218a168b4093d136613c041","name":"Fabien Lavocat","image":{"@type":"ImageObject","@id":"https:\/\/dolby.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/0fc56a90b3eff450d8ead43738f18a2c?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/0fc56a90b3eff450d8ead43738f18a2c?s=96&d=mm&r=g","caption":"Fabien Lavocat"},"url":"https:\/\/dolby.io\/blog\/author\/flavo\/"}]}},"uagb_featured_image_src":{"full":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg",1088,450,false],"thumbnail":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference-150x150.jpg",150,150,true],"medium":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference-300x124.jpg",300,124,true],"medium_large":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference-768x318.jpg",768,318,true],"large":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference-1024x424.jpg",1024,424,true],"1536x1536":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg",1088,450,false],"2048x2048":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference.jpg",1088,450,false],"featured-page":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference-1088x400.jpg",1088,400,true],"gb-block-post-grid-landscape":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference-600x400.jpg",600,400,true],"gb-block-post-grid-square":["https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference-600x450.jpg",600,450,true]},"uagb_author_info":{"display_name":"Fabien Lavocat","author_link":"https:\/\/dolby.io\/blog\/author\/flavo\/"},"uagb_comment_info":0,"uagb_excerpt":"A mixer layout application is a web app that the Dolby.io Communications APIs use to generate the layout for a recording or to live stream a conference.","featured_image_src":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference-600x400.jpg","featured_image_src_square":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/09\/Creating-a-Custom-Mixer-Layout-for-Streaming-a-Conference-600x450.jpg","author_info":{"display_name":"Fabien Lavocat","author_link":"https:\/\/dolby.io\/blog\/author\/flavo\/"},"_links":{"self":[{"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/posts\/617"}],"collection":[{"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/users\/19"}],"replies":[{"embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/comments?post=617"}],"version-history":[{"count":0,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/posts\/617\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/media\/2023"}],"wp:attachment":[{"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/media?parent=617"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/categories?post=617"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/tags?post=617"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}