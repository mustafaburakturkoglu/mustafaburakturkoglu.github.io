{"id":5509,"date":"2022-04-11T17:00:00","date_gmt":"2022-04-12T00:00:00","guid":{"rendered":"https:\/\/dolby.io\/?p=5509"},"modified":"2022-04-21T11:00:05","modified_gmt":"2022-04-21T18:00:05","slug":"using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io","status":"publish","type":"post","link":"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/","title":{"rendered":"Using Kotlin to Create Your First Audio Voice Call on Android with Dolby.io"},"content":{"rendered":"\n<p><a href=\"http:\/\/dolby.io\/\">Dolby.io<\/a>\u00a0provides Communication APIs that allow developers to create their own types of conference calling applications in a self-serve way. Here at Dolby.io, we provide an Android SDK that makes it as simple as possible to set up in your own application. In this\u00a0blog post, you&#8217;ll learn how to create an audio-only conference call using\u00a0<a href=\"http:\/\/dolby.io\/\">Dolby.io<\/a>\u00a0and Android Studio.<\/p>\n\n\n\n<h1 id=\"h-pre-requisites\">Pre-requisites<\/h1>\n\n\n\n<ul><li>Have latest version of&nbsp;<a href=\"https:\/\/developer.android.com\/studio\/?gclid=CjwKCAjwloCSBhAeEiwA3hVo_UvgkMOrFN1wcJIwPwV5DbqRME02lKvRFUv51eBwiNVs5PNiFj_CFBoCLE8QAvD_BwE&amp;gclsrc=aw.ds\">Android Studio<\/a>&nbsp;installed<\/li><li>Physical Android device or emulator<\/li><li>A&nbsp;<a href=\"https:\/\/auth.dolby.io\/realms\/Dolby.io\/protocol\/openid-connect\/registrations?client_id=dolby-io-website&amp;redirect_uri=https%3A%2F%2Fdashboard.dolby.io%2Fenrollment&amp;state=3b170c11-e569-455b-9dd7-0d4b99632999&amp;response_mode=fragment&amp;response_type=code&amp;scope=openid&amp;nonce=640a6915-9fa3-4865-8e5e-8563a9e32a8d\">Dolby.io&nbsp;account<\/a><\/li><\/ul>\n\n\n\n<h1>What the App will Look Like<\/h1>\n\n\n\n<p>Here&#8217;s what the final app looks like. View the <a href=\"https:\/\/github.com\/dolbyio-samples\/blog-android-kotlin-audio-call\">GitHub repo here!<\/a><\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><img loading=\"lazy\" src=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Screen-Recording-2022-03-30-at-6.49.06-PM.gif\" alt=\"Create conference call gif\" class=\"wp-image-5525\" width=\"249\" height=\"515\" \/><\/figure><\/div>\n\n\n\n<h1>Setup<\/h1>\n\n\n\n<h2>Creating a Dolby.io Account<\/h2>\n\n\n\n<p>Before coding, we&#8217;re going to have to create a\u00a0<a href=\"http:\/\/dolby.io\/\">Dolby.io<\/a>\u00a0account. Go to\u00a0<a href=\"http:\/\/dolby.io\/\">Dolby.io<\/a>\u00a0and click on <strong>Sign Up<\/strong> to get started. Once you&#8217;re registered, click on &#8220;Add a New App&#8221; in the dashboard page.<\/p>\n\n\n\n<p>Feel free to name the application anything you&#8217;d like! For the sake of this post, we&#8217;ll name it&nbsp;<strong>Android Audio Conference Call<\/strong>.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Dashboard-1024x518.png\" alt=\"Dolby.io dashboard\" class=\"wp-image-5515\" width=\"513\" height=\"259\" srcset=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Dashboard-1024x518.png 1024w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Dashboard-300x152.png 300w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Dashboard-768x389.png 768w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Dashboard.png 1114w\" sizes=\"(max-width: 513px) 100vw, 513px\" \/><\/figure><\/div>\n\n\n\n<p>Once we&#8217;ve got that created, you&#8217;ll see a new application under the\u00a0<strong>Applications<\/strong>\u00a0tab on the dashboard. Now whenever we need the Communications API keys, we can access them by either clicking on our application under the\u00a0<strong>Applications tab<\/strong>\u00a0or on the left side-bar.<\/p>\n\n\n\n<h2 id=\"h-setting-up-android-studio\">Setting Up Android Studio<\/h2>\n\n\n\n<p>Now that we&#8217;ve created an account and application, let&#8217;s start coding!<\/p>\n\n\n\n<p>Open up Android Studio and create a new empty project. Go ahead and fill out the required fields and make sure to select Kotlin as the app&#8217;s language. Once you&#8217;re done filling that out, click <strong>finish<\/strong>.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Android-Studio-Create-New-Project-1024x781.png\" alt=\"Android Studio create new project screen\" class=\"wp-image-5516\" width=\"624\" height=\"475\" srcset=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Android-Studio-Create-New-Project-1024x781.png 1024w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Android-Studio-Create-New-Project-300x229.png 300w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Android-Studio-Create-New-Project-768x585.png 768w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Android-Studio-Create-New-Project-1536x1171.png 1536w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Android-Studio-Create-New-Project.png 1842w\" sizes=\"(max-width: 624px) 100vw, 624px\" \/><\/figure><\/div>\n\n\n\n<h3 id=\"h-gradle-setup\">Gradle Setup<\/h3>\n\n\n\n<p>After your app finishes loading, open up the&nbsp;<a href=\"https:\/\/developer.android.com\/studio\/build?hl=en\">build.gradle (app)&nbsp;file<\/a>. Here we&#8217;ll include the VoxeetSDK depdendency and enable viewBinding.<\/p>\n\n\n\n<p>You can find the latest version of the Android SDK <a href=\"https:\/\/github.com\/voxeet\/voxeet-sdk-android\">here<\/a>!<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-java\">android {\n    ...\n    buildFeatures {\n        viewBinding = true\n    }\n}\n \ndependencies {\n    ...\n    implementation (&quot;com.voxeet.sdk:sdk:${version}&quot;) {\n        transitive = true\n    }\n}<\/code><\/pre>\n\n\n\n<p>Then\u00a0go into your\u00a0<code>settings.gradle<\/code>\u00a0file and add the Voxeet maven url under the repositories section.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-java\">dependencyResolutionManagement {\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n    repositories {\n        ...\n        maven { url &quot;https:\/\/android-sdk.voxeet.com\/release&quot; }\n    }\n}<\/code><\/pre>\n\n\n\n<p>After adding the dependency, sync the project.<\/p>\n\n\n\n<h3>Adding Permissions to <code>AndroidManifest.xml<\/code><\/h3>\n\n\n\n<p>Next go to the <code>AndroidManifest.xml<\/code> file and add these permissions between the manifest and application tag to enable internet and record audio in your app.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-markup\">&lt;manifest xmlns:android=&quot;http:\/\/schemas.android.com\/apk\/res\/android&quot;\n    package=&quot;com.dolbyio.android_audio_conference_call&quot;&gt;\n   \n    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; \/&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; \/&gt;\n    &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; \/&gt;\n\n    &lt;application\n       ...<\/code><\/pre>\n\n\n\n<h3 id=\"HowtoCreateYourFirstAudioConferenceCallUsingtheCommunicationsSDKinAndroidinKotlin-CreatinganEmulator\">Creating an Emulator (Optional)<\/h3>\n\n\n\n<p>Open the Device Manager in the top right of Android Studio.<\/p>\n\n\n\n<p>If you don&#8217;t have an\u00a0existing emulator, click on\u00a0<strong>Device Manager &gt; Create Device &gt; Emulator of choice, select a system image and click on finish.<\/strong><\/p>\n\n\n\n<p>For this post, we created a Pixel 4 XL emulator using API 30.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><img loading=\"lazy\" src=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/EmulatorCreation.gif\" alt=\"How to create an emulator\" class=\"wp-image-5518\" width=\"591\" height=\"472\" \/><\/figure><\/div>\n\n\n\n<h3 id=\"HowtoCreateYourFirstAudioConferenceCallUsingtheCommunicationsSDKinAndroidinKotlin-EnablingAndroidEmulatorMicrophone\">Enabling Android Emulator Microphone (Optional)<\/h3>\n\n\n\n<p>Run the emulator and click on settings. In the settings window, click on the Microphone option and enable all fields.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><img loading=\"lazy\" src=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/EnableMicrophone.gif\" alt=\"Enabling Android emulator microphone\" class=\"wp-image-5519\" width=\"610\" height=\"486\" \/><\/figure><\/div>\n\n\n\n<h1 id=\"HowtoCreateYourFirstAudioConferenceCallUsingtheCommunicationsSDKinAndroidinKotlin-ImplementingtheConferenceCall\">Implementing the Conference Call<\/h1>\n\n\n\n<h2 id=\"HowtoCreateYourFirstAudioConferenceCallUsingtheCommunicationsSDKinAndroidinKotlin-RequestMicrophonePermissions\">Request Microphone Permissions<\/h2>\n\n\n\n<p>Although we&#8217;ve enabled the emulator microphone, we&nbsp;still need to add&nbsp;the necessary microphone permissions to our app.<\/p>\n\n\n\n<p>In your&nbsp;<code>MainActivity.kt<\/code>&nbsp;file, we&#8217;ll be setting up our microphone permissions!<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-kotlin\">const val REQUEST_CODE = 200\n\nclass MainActivity : AppCompatActivity() {\n    ...\n    private var permissions = arrayOf(Manifest.permission.RECORD_AUDIO)\n    private var permissionGranted = false\n \n    override fun onCreate(savedInstanceState: Bundle?) {\n        ...\n        val permissionGranted = ActivityCompat.checkSelfPermission(this@MainActivity, permissions[0]) == PackageManager.PERMISSION_GRANTED\n        if (!permissionGranted) {\n            ActivityCompat.requestPermissions(this@MainActivity, permissions, REQUEST_CODE)\n        }\n    }\n \n    override fun onRequestPermissionsResult(\n        requestCode: Int,\n        permissions: Array&lt;out String&gt;,\n        grantResults: IntArray\n    ) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        if (requestCode == REQUEST_CODE) {\n            permissionGranted = (grantResults[0] == PackageManager.PERMISSION_GRANTED)\n        }\n    }\n}<\/code><\/pre>\n\n\n\n<p>Notice that we also implemented the onRequestPermissionResult function. After the user has allowed mic permissions, this&nbsp;updates&nbsp;our permissions if any changes have been made.<\/p>\n\n\n\n<p>With this, our emulator we&#8217;ll be able to hear audio!<\/p>\n\n\n\n<h2 id=\"HowtoCreateYourFirstAudioConferenceCallUsingtheCommunicationsSDKinAndroidinKotlin-InitializingviewBindingandtheSDK\">Initializing viewBinding and the SDK<\/h2>\n\n\n\n<p>Now that we&#8217;ve set up our&nbsp;<a href=\"http:\/\/dolby.io\/\">Dolby.io<\/a>&nbsp;dashboard and Android Studio, let&#8217;s move onto viewBinding.<\/p>\n\n\n\n<p>Inside the\u00a0<code>MainActivity.kt<\/code>, we&#8217;ll initialize a viewBinding variable which, will let us reference the different views within our app.<\/p>\n\n\n\n<p>Remember to grab your consumer key and secret from the&nbsp;<a href=\"http:\/\/dolby.io\/\">Dolby.io<\/a>&nbsp;dashboard. We&#8217;ll initialize the Communications SDK after we initialize our binding variable.<\/p>\n\n\n\n<p>Feel free to look at&nbsp;<a href=\"https:\/\/docs.dolby.io\/communications-apis\/docs\/initializing-android\">this guide<\/a>&nbsp;if you&#8217;d like to learn more about initializing the SDK.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-kotlin\">class MainActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityMainBinding\n \n    override fun onCreate(savedInstanceState: Bundle?) {\n        ...\n        \/\/ initialize binding\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        val view = binding.root\n        setContentView(view)\n        \/\/ initialize SDK\n        VoxeetSDK.initialize(&quot;consumerKey&quot;, &quot;consumerSecret&quot;)\n    }\n}<\/code><\/pre>\n\n\n\n<h2 id=\"HowtoCreateYourFirstAudioConferenceCallUsingtheCommunicationsSDKinAndroidinKotlin-CreatingtheLayoutfortheApp\">Creating the Layout for the App<\/h2>\n\n\n\n<p>Next let&#8217;s create the layout of the&nbsp;<code>MainActivity.kt<\/code>&nbsp;XML file.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-markup\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http:\/\/schemas.android.com\/apk\/res\/android&quot;\n    xmlns:app=&quot;http:\/\/schemas.android.com\/apk\/res-auto&quot;\n    xmlns:tools=&quot;http:\/\/schemas.android.com\/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    tools:context=&quot;.MainActivity&quot;&gt;\n \n    &lt;EditText\n        android:id=&quot;@+id\/etPodcastName&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:layout_marginLeft=&quot;12dp&quot;\n        android:layout_marginRight=&quot;12dp&quot;\n        android:ems=&quot;10&quot;\n        android:hint=&quot;Enter podcast name here...&quot;\n        android:inputType=&quot;textPersonName&quot;\n        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;\n        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;\n        app:layout_constraintRight_toRightOf=&quot;parent&quot;\n        app:layout_constraintTop_toTopOf=&quot;parent&quot; \/&gt;\n \n    &lt;Button\n        android:id=&quot;@+id\/btnCreate&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Create&quot;\n        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;\n        app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n        app:layout_constraintStart_toStartOf=&quot;parent&quot;\n        app:layout_constraintTop_toBottomOf=&quot;@+id\/etPodcastName&quot;\n        app:layout_constraintVertical_bias=&quot;0.03&quot; \/&gt;\n \n    &lt;Button\n        android:id=&quot;@+id\/btnLeaveCall&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:layout_marginBottom=&quot;100dp&quot;\n        android:enabled=&quot;false&quot;\n        android:text=&quot;Leave Call&quot;\n        android:visibility=&quot;invisible&quot;\n        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;\n        app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n        app:layout_constraintHorizontal_bias=&quot;0.498&quot;\n        app:layout_constraintStart_toStartOf=&quot;parent&quot; \/&gt;\n&lt;\/androidx.constraintlayout.widget.ConstraintLayout&gt;<\/code><\/pre>\n\n\n\n<h2 id=\"HowtoCreateYourFirstAudioConferenceCallUsingtheCommunicationsSDKinAndroidinKotlin-ImplementingtheConferenceCallHelperFunctions\">Implementing the Conference Call Helper Functions<\/h2>\n\n\n\n<p>Once we&#8217;ve set up our XML, let&#8217;s implement the functions that will help us create a conference call.<\/p>\n\n\n\n<p>Add these function definitions in your&nbsp;<code>MainActivity.kt<\/code>&nbsp;file.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-kotlin\">class MainActivity : AppCompatActivity() {\n    ...\n    \/\/ open a session for the participant creating a call\n    private fun openSession(\n        name: String,\n        externalID: String = &quot;&quot;,\n        avatarURL: String = &quot;&quot;\n    ): Promise&lt;Boolean&gt; {...}\n \n    \/\/ create a call Promise object\n    private fun createConferencePromise(\n        conferenceName: String\n    ): PromiseInOut&lt;Conference, Conference&gt; {...}\n \n    \/\/ returns a Promise object allowing us to join the call   \n    private fun joinCall(conferencePromise: Promise&lt;Conference&gt;): PromiseInOut&lt;Conference, Conference&gt; {...}\n \n    \/\/ closes the participant&#039;s session\n    \/\/ called when participant leaves the call\n    private fun closeSession() {...}\n \n    \/\/ logs the error to logcat if VoxeetSDK create or join promise fails\n    private fun error(): ErrorPromise? {...}\n}<\/code><\/pre>\n\n\n\n<h3 id=\"HowtoCreateYourFirstAudioConferenceCallUsingtheCommunicationsSDKinAndroidinKotlin-ImplementingopenSession()function\">Implementing&nbsp;<code>openSession()<\/code>&nbsp;function<\/h3>\n\n\n\n<p>The&nbsp;<code>openSession()<\/code>&nbsp;function will allow us to register the participants&#8217; info in the Voxeet service. Before even creating a conference, a user must always open a session.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-kotlin\">private fun openSession(\n        name: String,\n        externalID: String = &quot;&quot;,\n        avatarURL: String = &quot;&quot;\n    ): Promise&lt;Boolean&gt; {\n    \/\/ opens a new session for participant\n    return VoxeetSDK.session().open(ParticipantInfo(name, externalID, avatarURL))\n}<\/code><\/pre>\n\n\n\n<h3 id=\"HowtoCreateYourFirstAudioConferenceCallUsingtheCommunicationsSDKinAndroidinKotlin-ImplementingcreateConferencePromise()function\">Implementing&nbsp;<code>createConferencePromise()<\/code>&nbsp;function<\/h3>\n\n\n\n<p>Once we have an open session, we can now create a conference call using the VoxeetSDK.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-kotlin\">private fun createConferencePromise(\n    conferenceName: String\n): PromiseInOut&lt;Conference, Conference&gt; {\n    \/\/ set paramaters for our conference call\n    val paramsHolder = ParamsHolder()\n    paramsHolder.setDolbyVoice(isDolbyVoice)\n    paramsHolder.setVideoCodec(&quot;VP8&quot;)\n    paramsHolder.setAudioOnly(true)\n \n    \/\/ add parameters to conference builder\n    val conferenceCreateOptions = ConferenceCreateOptions.Builder()\n        .setConferenceAlias(conferenceName)\n        .setParamsHolder(paramsHolder)\n        .build()\n \n    val createPromise = VoxeetSDK.conference().create(conferenceCreateOptions)\n \n    return joinCall(createPromise)\n}<\/code><\/pre>\n\n\n\n<p>So what we&#8217;ve done so far is set up our parameters and create a promise for the conference call. The next step is to handle that promise object in the&nbsp;<code>joinCall()<\/code>&nbsp;function we&#8217;ll be implementing!<\/p>\n\n\n\n<h3 id=\"HowtoCreateYourFirstAudioConferenceCallUsingtheCommunicationsSDKinAndroidinKotlin-ImplementingjoinCall()function\">Implementing&nbsp;<code>joinCall()<\/code>&nbsp;function<\/h3>\n\n\n\n<p>The\u00a0<code>joinCall()<\/code>\u00a0function will allow us to now hop into the audio-only conference we create when we call the\u00a0<code>createConferencePromise()<\/code>\u00a0function handling the promise returned.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-kotlin\">private fun joinCall(conferencePromise: Promise&lt;Conference&gt;): PromiseInOut&lt;Conference, Conference&gt; {\n    val joinPromise = conferencePromise.then(ThenPromise&lt;Conference, Conference&gt; { conference -&gt;\n        val conferenceJoinOptions: ConferenceJoinOptions = ConferenceJoinOptions.Builder(conference).build()\n            return@ThenPromise VoxeetSDK.conference().join(conferenceJoinOptions)\n        })\n    return joinPromise\n}<\/code><\/pre>\n\n\n\n<h3>Implementing&nbsp;<code>closeCall()<\/code>&nbsp;function<\/h3>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-kotlin\">private fun closeSession() {\n    VoxeetSDK.session().close()\n        .then { result: Boolean?, solver: Solver&lt;Any?&gt;? -&gt;\n            Toast.makeText(this@MainActivity, &quot;closed session&quot;, Toast.LENGTH_SHORT).show()\n            updateViews(true)\n        }.error{\n            Log.e(&quot;MainActivity&quot;, &quot;Error with closing session&quot;)\n        }\n}<\/code><\/pre>\n\n\n\n<h3 id=\"h-implementing-error-function\">Implementing&nbsp;<code>error()<\/code>&nbsp;function<\/h3>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-kotlin\">fun error(): ErrorPromise {\n    return ErrorPromise { error: Throwable -&gt;\n        Log.e(&quot;MainActivity&quot;, error.printStackTrace().toString())\n    }\n}<\/code><\/pre>\n\n\n\n<p>At this point, we have set up the required functions that will handle creating a conference call!<\/p>\n\n\n\n<h2 id=\"HowtoCreateYourFirstAudioConferenceCallUsingtheCommunicationsSDKinAndroidinKotlin-Updatingtheviews\">Updating the views<\/h2>\n\n\n\n<p>Next we&#8217;ll create a few helper functions to update the views and handle any onClick events in our app.<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-kotlin\">private fun initializeBtnCreateCall() {...}\n \nprivate fun initializeBtnEndCall() {...}\n \nprivate fun updateViews(enabled: Boolean) {...}<\/code><\/pre>\n\n\n\n<p>We can now use the binding variable we initialized in the onCreate() function to listen for any button clicks.<\/p>\n\n\n\n<h3 id=\"HowtoCreateYourFirstAudioConferenceCallUsingtheCommunicationsSDKinAndroidinKotlin-ImplementinginitializeBtnCreateCall()function\">Implementing&nbsp;<code>initializeBtnCreateCall()<\/code>&nbsp;function<\/h3>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-kotlin\">private fun initializeBtnCreateCall() {\n    binding.btnCreate.setOnClickListener {\n    val podcastName = binding.etPodcastName.text.toString()\n     \n    if (podcastName.isNotEmpty()) {\n        val session = openSession(&quot;Person 1&quot;)\n        session.then { result: Boolean?, solver: Solver&lt;Any?&gt;? -&gt;\n            Toast.makeText(this@MainActivity, &quot;Opened session&quot;, Toast.LENGTH_SHORT).show()\n            createConferencePromise(\n                podcastName\n            ).then&lt;Any&gt;(ThenVoid { conference: Conference? -&gt;\n                Toast.makeText(this@MainActivity, &quot;${conference?.alias} conference started...&quot;, Toast.LENGTH_SHORT ).show()\n                updateViews(false)\n        })\n            .error {\n                Log.e(&quot;MainActivity&quot;, &quot;error creating a conference&quot;)\n            }\n        }.error {\n            Log.e(&quot;MainActivity&quot;, &quot;error opening a session&quot;)\n        }\n    } else {\n        Toast.makeText(this@MainActivity, &quot;Podcast name can&#039;t be empty&quot;, Toast.LENGTH_LONG).show()\n        }\n    }\n}<\/code><\/pre>\n\n\n\n<h3>Implementing&nbsp;<code>initializeBtnEndCall()<\/code>&nbsp;function<\/h3>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-kotlin\">private fun initializeBtnEndCall() {\n    binding.btnLeaveCall.setOnClickListener {\n    VoxeetSDK.conference().leave()\n        .then { result: Boolean?, solver: Solver&lt;Any?&gt;? -&gt;\n            closeSession()\n        }.error(error())\n    }\n}<\/code><\/pre>\n\n\n\n<h3 id=\"h-implementing-updateviews-function\">Implementing&nbsp;<code>updateViews()<\/code>&nbsp;function&nbsp;<\/h3>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-kotlin\">private fun updateViews(enabled: Boolean) {\n    binding.btnCreate.isEnabled = enabled\n    binding.etPodcastName.isEnabled = enabled\n    binding.btnLeaveCall.isEnabled = !enabled\n    if (!enabled) {\n        binding.btnLeaveCall.visibility = View.VISIBLE\n    } else {\n        binding.btnLeaveCall.visibility = View.INVISIBLE\n    }\n}<\/code><\/pre>\n\n\n\n<h1 id=\"HowtoCreateYourFirstAudioConferenceCallUsingtheCommunicationsSDKinAndroidinKotlin-Puttingitalltogether\">Putting it all together<\/h1>\n\n\n\n<p>Now we have all the necessary parts to create our first conference call using the Communications APIs!<\/p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-kotlin\">class MainActivity : AppCompatActivity() {\n \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        val view = binding.root\n        setContentView(view)\n \n        val permissionGranted = ActivityCompat.checkSelfPermission(this@MainActivity, permissions[0]) == PackageManager.PERMISSION_GRANTED\n        if (!permissionGranted) {\n            ActivityCompat.requestPermissions(this@MainActivity, permissions, REQUEST_CODE)\n        }\n                 \n        VoxeetSDK.initialize(&quot;consumerKey&quot;, &quot;consumerSecret&quot;)\n \n        initializeBtnCreateCall()\n        initializeBtnEndCall()\n    }\n}<\/code><\/pre>\n\n\n\n<h1 id=\"HowtoCreateYourFirstAudioConferenceCallUsingtheCommunicationsSDKinAndroidinKotlin-RuntheApp!\">Run the App!<\/h1>\n\n\n\n<p>Let&#8217;s run the app&nbsp;and try&nbsp;creating a call!<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><img loading=\"lazy\" src=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Screen-Recording-2022-03-30-at-6.49.06-PM.gif\" alt=\"Create conference call gif\" class=\"wp-image-5525\" width=\"249\" height=\"515\" \/><\/figure><\/div>\n\n\n\n<p>When you check the\u00a0<a href=\"http:\/\/dolby.io\/\">Dolby.io<\/a>\u00a0dashboard, you&#8217;ll see a conference has been\u00a0created.\u00a0To get here, click on the application we created earlier and go to the monitor section under Communications APIs. Here you&#8217;ll be able to see the all the conference details including if the call is live, name, conference ID, and more!<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img loading=\"lazy\" src=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Screen-Shot-2022-04-05-at-10.53.35-AM-1024x520.png\" alt=\"Conference call made in Dolby.io dashboard\" class=\"wp-image-5566\" width=\"696\" height=\"353\" srcset=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Screen-Shot-2022-04-05-at-10.53.35-AM-1024x520.png 1024w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Screen-Shot-2022-04-05-at-10.53.35-AM-300x152.png 300w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Screen-Shot-2022-04-05-at-10.53.35-AM-768x390.png 768w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Screen-Shot-2022-04-05-at-10.53.35-AM-1536x780.png 1536w, https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/Screen-Shot-2022-04-05-at-10.53.35-AM.png 1920w\" sizes=\"(max-width: 696px) 100vw, 696px\" \/><\/figure><\/div>\n\n\n\n<p><strong>Congrats! You&#8217;ve officially made your first audio conference call using Dolby.io!<\/strong><\/p>\n\n\n\n<p><a href=\"https:\/\/github.com\/dolbyio-samples\/blog-android-kotlin-audio-call\">Link to GitHub repo<\/a><\/p>\n\n\n\n<p>Want to learn more? Visit our <a href=\"https:\/\/docs.dolby.io\/communications-apis\/docs\/android-overview\" target=\"_blank\" rel=\"noreferrer noopener\">Android Communications SDK Docs here!<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Learn how to use Kotlin to build an Android application that supports Voice Calls.<\/p>\n","protected":false},"author":44,"featured_media":5616,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":{"inline_featured_image":false,"_genesis_hide_title":false,"_genesis_hide_breadcrumbs":false,"_genesis_hide_singular_image":false,"_genesis_hide_footer_widgets":false,"_genesis_custom_body_class":"","_genesis_custom_post_class":"","_genesis_layout":""},"categories":[11,9],"tags":[26,160],"acf":[],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v17.2 (Yoast SEO v18.5.1) - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Using Kotlin to Create Your First Audio Voice Call on Android with Dolby.io - Dolby.io<\/title>\n<meta name=\"description\" content=\"Learn how to use Kotlin to build an Android application that supports Voice Calls.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Using Kotlin to Create Your First Audio Voice Call on Android with Dolby.io\" \/>\n<meta property=\"og:description\" content=\"Learn how to use Kotlin to build an Android application that supports Voice Calls.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/\" \/>\n<meta property=\"og:site_name\" content=\"Dolby.io\" \/>\n<meta property=\"article:published_time\" content=\"2022-04-12T00:00:00+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-04-21T18:00:05+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1088\" \/>\n\t<meta property=\"og:image:height\" content=\"450\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Denize Ignacio\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"8 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"https:\/\/dolby.io\/#organization\",\"name\":\"Dolby.io\",\"url\":\"https:\/\/dolby.io\/\",\"sameAs\":[],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/dolby.io\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/DolbyIO-favicon.png\",\"contentUrl\":\"https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/DolbyIO-favicon.png\",\"width\":512,\"height\":512,\"caption\":\"Dolby.io\"},\"image\":{\"@id\":\"https:\/\/dolby.io\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/dolby.io\/#website\",\"url\":\"https:\/\/dolby.io\/\",\"name\":\"Dolby.io\",\"description\":\"Dolby.io\",\"publisher\":{\"@id\":\"https:\/\/dolby.io\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/dolby.io\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin.jpg\",\"contentUrl\":\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin.jpg\",\"width\":1088,\"height\":450,\"caption\":\"Intro image for blog post\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/#webpage\",\"url\":\"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/\",\"name\":\"Using Kotlin to Create Your First Audio Voice Call on Android with Dolby.io - Dolby.io\",\"isPartOf\":{\"@id\":\"https:\/\/dolby.io\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/#primaryimage\"},\"datePublished\":\"2022-04-12T00:00:00+00:00\",\"dateModified\":\"2022-04-21T18:00:05+00:00\",\"description\":\"Learn how to use Kotlin to build an Android application that supports Voice Calls.\",\"breadcrumb\":{\"@id\":\"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/dolby.io\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Using Kotlin to Create Your First Audio Voice Call on Android with Dolby.io\"}]},{\"@type\":\"Article\",\"@id\":\"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/#webpage\"},\"author\":{\"@id\":\"https:\/\/dolby.io\/#\/schema\/person\/8d6a8c58032980276ce76140baa0489c\"},\"headline\":\"Using Kotlin to Create Your First Audio Voice Call on Android with Dolby.io\",\"datePublished\":\"2022-04-12T00:00:00+00:00\",\"dateModified\":\"2022-04-21T18:00:05+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/#webpage\"},\"wordCount\":960,\"publisher\":{\"@id\":\"https:\/\/dolby.io\/#organization\"},\"image\":{\"@id\":\"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/#primaryimage\"},\"thumbnailUrl\":\"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin.jpg\",\"keywords\":[\"android\",\"kotlin\"],\"articleSection\":[\"Communications\",\"Developer\"],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/dolby.io\/#\/schema\/person\/8d6a8c58032980276ce76140baa0489c\",\"name\":\"Denize Ignacio\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/dolby.io\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/0a7fcbf3f3607c58f5de29310c6a5959?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/0a7fcbf3f3607c58f5de29310c6a5959?s=96&d=mm&r=g\",\"caption\":\"Denize Ignacio\"},\"url\":\"https:\/\/dolby.io\/blog\/author\/denize-ignaciodolby-com\/\"}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","yoast_head_json":{"title":"Using Kotlin to Create Your First Audio Voice Call on Android with Dolby.io - Dolby.io","description":"Learn how to use Kotlin to build an Android application that supports Voice Calls.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/","og_locale":"en_US","og_type":"article","og_title":"Using Kotlin to Create Your First Audio Voice Call on Android with Dolby.io","og_description":"Learn how to use Kotlin to build an Android application that supports Voice Calls.","og_url":"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/","og_site_name":"Dolby.io","article_published_time":"2022-04-12T00:00:00+00:00","article_modified_time":"2022-04-21T18:00:05+00:00","og_image":[{"width":1088,"height":450,"url":"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin.jpg","type":"image\/jpeg"}],"twitter_card":"summary_large_image","twitter_misc":{"Written by":"Denize Ignacio","Est. reading time":"8 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Organization","@id":"https:\/\/dolby.io\/#organization","name":"Dolby.io","url":"https:\/\/dolby.io\/","sameAs":[],"logo":{"@type":"ImageObject","@id":"https:\/\/dolby.io\/#logo","inLanguage":"en-US","url":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/DolbyIO-favicon.png","contentUrl":"https:\/\/dolby.io\/wp-content\/uploads\/2021\/07\/DolbyIO-favicon.png","width":512,"height":512,"caption":"Dolby.io"},"image":{"@id":"https:\/\/dolby.io\/#logo"}},{"@type":"WebSite","@id":"https:\/\/dolby.io\/#website","url":"https:\/\/dolby.io\/","name":"Dolby.io","description":"Dolby.io","publisher":{"@id":"https:\/\/dolby.io\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/dolby.io\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/#primaryimage","inLanguage":"en-US","url":"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin.jpg","contentUrl":"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin.jpg","width":1088,"height":450,"caption":"Intro image for blog post"},{"@type":"WebPage","@id":"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/#webpage","url":"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/","name":"Using Kotlin to Create Your First Audio Voice Call on Android with Dolby.io - Dolby.io","isPartOf":{"@id":"https:\/\/dolby.io\/#website"},"primaryImageOfPage":{"@id":"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/#primaryimage"},"datePublished":"2022-04-12T00:00:00+00:00","dateModified":"2022-04-21T18:00:05+00:00","description":"Learn how to use Kotlin to build an Android application that supports Voice Calls.","breadcrumb":{"@id":"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/dolby.io\/"},{"@type":"ListItem","position":2,"name":"Using Kotlin to Create Your First Audio Voice Call on Android with Dolby.io"}]},{"@type":"Article","@id":"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/#article","isPartOf":{"@id":"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/#webpage"},"author":{"@id":"https:\/\/dolby.io\/#\/schema\/person\/8d6a8c58032980276ce76140baa0489c"},"headline":"Using Kotlin to Create Your First Audio Voice Call on Android with Dolby.io","datePublished":"2022-04-12T00:00:00+00:00","dateModified":"2022-04-21T18:00:05+00:00","mainEntityOfPage":{"@id":"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/#webpage"},"wordCount":960,"publisher":{"@id":"https:\/\/dolby.io\/#organization"},"image":{"@id":"https:\/\/dolby.io\/blog\/using-kotlin-to-create-your-first-audio-voice-call-on-android-with-dolby-io\/#primaryimage"},"thumbnailUrl":"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin.jpg","keywords":["android","kotlin"],"articleSection":["Communications","Developer"],"inLanguage":"en-US"},{"@type":"Person","@id":"https:\/\/dolby.io\/#\/schema\/person\/8d6a8c58032980276ce76140baa0489c","name":"Denize Ignacio","image":{"@type":"ImageObject","@id":"https:\/\/dolby.io\/#personlogo","inLanguage":"en-US","url":"https:\/\/secure.gravatar.com\/avatar\/0a7fcbf3f3607c58f5de29310c6a5959?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/0a7fcbf3f3607c58f5de29310c6a5959?s=96&d=mm&r=g","caption":"Denize Ignacio"},"url":"https:\/\/dolby.io\/blog\/author\/denize-ignaciodolby-com\/"}]}},"uagb_featured_image_src":{"full":["https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin.jpg",1088,450,false],"thumbnail":["https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin-150x150.jpg",150,150,true],"medium":["https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin-300x124.jpg",300,124,true],"medium_large":["https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin-768x318.jpg",768,318,true],"large":["https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin-1024x424.jpg",1024,424,true],"1536x1536":["https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin.jpg",1088,450,false],"2048x2048":["https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin.jpg",1088,450,false],"featured-page":["https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin-1088x400.jpg",1088,400,true],"gb-block-post-grid-landscape":["https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin-600x400.jpg",600,400,true],"gb-block-post-grid-square":["https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin-600x450.jpg",600,450,true]},"uagb_author_info":{"display_name":"Denize Ignacio","author_link":"https:\/\/dolby.io\/blog\/author\/denize-ignaciodolby-com\/"},"uagb_comment_info":0,"uagb_excerpt":"Learn how to use Kotlin to build an Android application that supports Voice Calls.","featured_image_src":"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin-600x400.jpg","featured_image_src_square":"https:\/\/dolby.io\/wp-content\/uploads\/2022\/03\/How-to-Create-Your-First-Audio-Conference-Call-Using-the-Communications-SDK-in-Android-in-Kotlin-600x450.jpg","author_info":{"display_name":"Denize Ignacio","author_link":"https:\/\/dolby.io\/blog\/author\/denize-ignaciodolby-com\/"},"_links":{"self":[{"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/posts\/5509"}],"collection":[{"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/users\/44"}],"replies":[{"embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/comments?post=5509"}],"version-history":[{"count":0,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/posts\/5509\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/media\/5616"}],"wp:attachment":[{"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/media?parent=5509"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/categories?post=5509"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/dolby.io\/wp-json\/wp\/v2\/tags?post=5509"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}